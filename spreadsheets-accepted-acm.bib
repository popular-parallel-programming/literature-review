@inproceedings{Karinthi:1987:IRP:29650.29654,
  author = 	 {Karinthi, R. R. and Weiser, M.},
  title = 	 {{Incremental Re-execution of Programs}},
  booktitle = 	 {Papers of the Symposium on Interpreters and
                  Interpretive Techniques},
  series = 	 {SIGPLAN '87},
  year = 	 {1987},
  isbn = 	 {0-89791-235-7},
  location = 	 {St. Paul, Minnesota, USA},
  pages = 	 {38--44},
  numpages = 	 {7},
  url = 	 {http://doi.acm.org/10.1145/29650.29654},
  doi = 	 {10.1145/29650.29654},
  acmid = 	 {29654},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  review = 	 {fbie: rejected <2016-01-29 16:09:03>},
  abstract = 	 {Interpreters replace the edit/compile/run cyle with edit/run. Dynamic computing environments, like spreadsheets, shorten this still more to just edit. So-called "Visiprog" environments, such as Maryland's XED, permit developing normal imperative programs in a dynamic computing environment, XED and similar environments, because they show the results of executing a program after every (reasonable) editing step, raise the issue of efficient incremental execution. Incremental execution optimizations are also applicable to any programming situation, including batch/cards, in which nearly the same program is run many times on nearly the same data. However, the requirement of remembering large amounts of internal state between runs make incremental exectution most natural for interpreted languages. This paper examines some algorithms for incremental execution. Based on the frequency of typical program editing changes, we predict the importance of optimizing certain kinds of incremental execution. We also examine actual speedups obtained in executing programs after subjecting them to these simulated incremental edits under these optimizations. The speedups range from factors of 1.1 to near 10. Finally, we discuss the feasibility of including these optimizations in an actual dynamic computing environment like XED, and in more traditional programming environments.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=29654&ftid=262412&dwn=1&CFID=575549397&CFTOKEN=15758644},
  notes = 	 {Incremental evaluation. Low priority read},
}
@article{Karinthi:1987:IRP:960114.29654,
  author = 	 {Karinthi, R. R. and Weiser, M.},
  title = 	 {{Incremental Re-execution of Programs}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {July 1987},
  volume = 	 {22},
  number = 	 {7},
  month = 	 {jul},
  year = 	 {1987},
  issn = 	 {0362-1340},
  pages = 	 {38--44},
  numpages = 	 {7},
  url = 	 {http://doi.acm.org/10.1145/960114.29654},
  doi = 	 {10.1145/960114.29654},
  acmid = 	 {29654},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  notes = 	 {Incremental evaluation. Low priority read.},
  review = 	 {fbie: rejected <2016-01-29 16:09:06>},
  abstract = 	 {Interpreters replace the edit/compile/run cyle with edit/run. Dynamic computing environments, like spreadsheets, shorten this still more to just edit. So-called "Visiprog" environments, such as Maryland's XED, permit developing normal imperative programs in a dynamic computing environment, XED and similar environments, because they show the results of executing a program after every (reasonable) editing step, raise the issue of efficient incremental execution. Incremental execution optimizations are also applicable to any programming situation, including batch/cards, in which nearly the same program is run many times on nearly the same data. However, the requirement of remembering large amounts of internal state between runs make incremental exectution most natural for interpreted languages. This paper examines some algorithms for incremental execution. Based on the frequency of typical program editing changes, we predict the importance of optimizing certain kinds of incremental execution. We also examine actual speedups obtained in executing programs after subjecting them to these simulated incremental edits under these optimizations. The speedups range from factors of 1.1 to near 10. Finally, we discuss the feasibility of including these optimizations in an actual dynamic computing environment like XED, and in more traditional programming environments.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=29654&ftid=262412&dwn=1&CFID=575549397&CFTOKEN=15758644},
}
@inproceedings{Jones:2003:UAF:944705.944721,
  author = 	 {Jones, Simon Peyton and Blackwell, Alan and Burnett,
                  Margaret},
  title = 	 {{A User-centred Approach to Functions in Excel}},
  booktitle = 	 {Proceedings of the Eighth ACM SIGPLAN International
                  Conference on Functional Programming},
  series = 	 {ICFP '03},
  year = 	 {2003},
  isbn = 	 {1-58113-756-7},
  location = 	 {Uppsala, Sweden},
  pages = 	 {165--176},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/944705.944721},
  doi = 	 {10.1145/944705.944721},
  acmid = 	 {944721},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We describe extensions to the Excel spreadsheet that integrate user-defined functions into the spreadsheet grid, rather than treating them as a "bolt-on". Our first objective was to bring the benefits of additional programming language features to a system that is often not recognised as a programming language. Second, in a project involving the evolution of a well-established language, compatibility with previous versions is a major issue, and maintaining this compatibility was our second objective. Third and most important, the commercial success of spreadsheets is largely due to the fact that many people find them more usable than programming languages for programming-like tasks. Thus, our third objective (with resulting constraints) was to maintain this usability advantage.Simply making Excel more like a conventional programming language would not meet these objectives and constraints. We have therefore taken an approach to our design work that emphasises the cognitive requirements of the user as a primary design criterion. The analytic approach that we demonstrate in this project is based on recent developments in the study of programming usability, including the Cognitive Dimensions of Notations and the Attention Investment model of abstraction use. We believe that this approach is also applicable to the design and extension of other programming languages and environments.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=944721&ftid=233102&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:09:08>},
  notes = 	 {Must read.},
}
@article{Jones:2003:UAF:944746.944721,
  author = 	 {Jones, Simon Peyton and Blackwell, Alan and Burnett,
                  Margaret},
  title = 	 {{A User-centred Approach to Functions in Excel}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {September 2003},
  volume = 	 {38},
  number = 	 {9},
  month = 	 {aug},
  year = 	 {2003},
  issn = 	 {0362-1340},
  pages = 	 {165--176},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/944746.944721},
  doi = 	 {10.1145/944746.944721},
  acmid = 	 {944721},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We describe extensions to the Excel spreadsheet that integrate user-defined functions into the spreadsheet grid, rather than treating them as a "bolt-on". Our first objective was to bring the benefits of additional programming language features to a system that is often not recognised as a programming language. Second, in a project involving the evolution of a well-established language, compatibility with previous versions is a major issue, and maintaining this compatibility was our second objective. Third and most important, the commercial success of spreadsheets is largely due to the fact that many people find them more usable than programming languages for programming-like tasks. Thus, our third objective (with resulting constraints) was to maintain this usability advantage.Simply making Excel more like a conventional programming language would not meet these objectives and constraints. We have therefore taken an approach to our design work that emphasises the cognitive requirements of the user as a primary design criterion. The analytic approach that we demonstrate in this project is based on recent developments in the study of programming usability, including the Cognitive Dimensions of Notations and the Attention Investment model of abstraction use. We believe that this approach is also applicable to the design and extension of other programming languages and environments.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=944721&ftid=233102&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:09:09>},
}
@inproceedings{Benfield:2009:FFD:1668113.1668121,
  author = 	 {Benfield, Lee},
  title = 	 {{FMD: Functional Development in Excel}},
  booktitle = 	 {Proceedings of the 2009 Video Workshop on Commercial
                  Users of Functional Programming: Functional
                  Programming As a Means, Not an End},
  series = 	 {CUFP '09},
  year = 	 {2009},
  isbn = 	 {978-1-60558-943-5},
  location = 	 {Edinburgh, Scotland},
  articleno = 	 {8},
  url = 	 {http://doi.acm.org/10.1145/1668113.1668121},
  doi = 	 {10.1145/1668113.1668121},
  acmid = 	 {1668121},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Barclays Capital, like many other investment banks, uses Microsoft Excel as a rapid application development environment for pricing models and other tools. While this may sound bizarre, Excel's flexibility and convenience renders it an immensely useful tool for the Front Office, and our Traders are extremely Excel literate. Excel combines two programming models a zeroth order functional language (the spreadsheet) an imperative programming language (Visual Basic for Applications) The functional model allows very rapid development and great transparency, but the limitations of Excel's built-in functions drives developers to use VBA. Soon the spreadsheet dependency graph is lost and the spreadsheet layer is relegated to a GUI on top of tens/hundreds of thousands of lines of VBA. The logic is tightly tied to Excel, and a server-side implementation involves a complete rewrite in another language, which carries both operational risk and developmental cost. FMD ('Functional Model Deployment') prevents these problems by embedding a functional language cleanly into Excel, effectively extending Excel to be a higher order functional environment. Now complex models can be developed without leaving the pure spreadsheet domain: Before 1.Limited built-in functions need to be extended with add-ins or VBA. 2.Boilerplate code needs to be written to import libraries. 3.Systems need to be rewritten to run outside Excel. (typically ported to C++ / C# back end) After 1.Functions can be defined on-the-fly without leaving the pure spreadsheet side. 2.Dynamic and data-driven wrappers make external libraries directly visible. 3.Spreadsheet 'programs' can be exported and run outside of Excel. The business have fully supported this approach, and are enthusiastic about using FMD - as Simon Peyton Jones identified elsewhere, "Excel is the world's most popular functional language". From their point of view, functional programming in Excel is just an extension of what they've been doing for years!},
  review = 	 {fbie: accepted <2016-01-29 16:09:34>},
  notes = 	 {Seems highly related to Funcalc. Must view.},
}
@inproceedings{Lewis:1985:ESI:317456.317466,
  author = 	 {Lewis, Clayton},
  title = 	 {Extending the Spreadsheet Interface to Handle
                  Approximate Quantities and Relationships},
  booktitle = 	 {Proceedings of the SIGCHI Conference on Human
                  Factors in Computing Systems},
  series = 	 {CHI '85},
  year = 	 {1985},
  isbn = 	 {0-89791-149-0},
  location = 	 {San Francisco, California, USA},
  pages = 	 {55--59},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/317456.317466},
  doi = 	 {10.1145/317456.317466},
  acmid = 	 {317466},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Conventional spreadsheet programs offer a very convenient user interface for many quantitative tasks, but they are restricted to handling precisely-specified quantities and calculations. ASP is a generalized spreadsheet that extends the basic spreadsheet paradigm to encompass quantities which are not known exactly, and functions which are not known well enough to permit calculation. ASP works by propagating assertions about quantities and functions through the network of relationships that the spreadsheet defines.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=317466&ftid=16233&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:44>},
  notes = 	 {Computing with approximate values. Related to interval arithmetics. Low priority read.},
}
@article{Lewis:1985:ESI:1165385.317466,
  author = 	 {Lewis, Clayton},
  title = 	 {Extending the Spreadsheet Interface to Handle
                  Approximate Quantities and Relationships},
  journal = 	 {SIGCHI Bull.},
  issue_date = 	 {April 1985},
  volume = 	 {16},
  number = 	 {4},
  month = 	 {apr},
  year = 	 {1985},
  issn = 	 {0736-6906},
  pages = 	 {55--59},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1165385.317466},
  doi = 	 {10.1145/1165385.317466},
  acmid = 	 {317466},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Conventional spreadsheet programs offer a very convenient user interface for many quantitative tasks, but they are restricted to handling precisely-specified quantities and calculations. ASP is a generalized spreadsheet that extends the basic spreadsheet paradigm to encompass quantities which are not known exactly, and functions which are not known well enough to permit calculation. ASP works by propagating assertions about quantities and functions through the network of relationships that the spreadsheet defines.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=317466&ftid=16233&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:47>},
}
@inproceedings{Piersol:1986:OSA:28697.28737,
  author = 	 {Piersol, Kurt W.},
  title = 	 {{Object-oriented Spreadsheets: The Analytic
                  Spreadsheet Package}},
  booktitle = 	 {Conference Proceedings on Object-oriented
                  Programming Systems, Languages and Applications},
  series = 	 {OOPLSA '86},
  year = 	 {1986},
  isbn = 	 {0-89791-204-7},
  location = 	 {Portland, Oregon, USA},
  pages = 	 {385--390},
  numpages = 	 {6},
  url = 	 {http://doi.acm.org/10.1145/28697.28737},
  doi = 	 {10.1145/28697.28737},
  acmid = 	 {28737},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {The ASP package, a spreadsheet implemented in Smalltalk-80, is discussed. A description of the unique data manipulation features of ASP is given. A discussion of how these features arise from the Smalltalk-80 environment is included, with emphasis on features not common to all object oriented languages.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=28737&ftid=32265&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:51>},
  notes = 	 {Embedding spreadsheets in OO and vice versa. Low priority read.},
}
@article{Piersol:1986:OSA:960112.28737,
  author = 	 {Piersol, Kurt W.},
  title = 	 {{Object-oriented Spreadsheets: The Analytic
                  Spreadsheet Package}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {Nov. 1986},
  volume = 	 {21},
  number = 	 {11},
  month = 	 {jun},
  year = 	 {1986},
  issn = 	 {0362-1340},
  pages = 	 {385--390},
  numpages = 	 {6},
  url = 	 {http://doi.acm.org/10.1145/960112.28737},
  doi = 	 {10.1145/960112.28737},
  acmid = 	 {28737},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {The ASP package, a spreadsheet implemented in Smalltalk-80, is discussed. A description of the unique data manipulation features of ASP is given. A discussion of how these features arise from the Smalltalk-80 environment is included, with emphasis on features not common to all object oriented languages.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=28737&ftid=32265&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:53>},
}
@inproceedings{Hermans:2015:IWS:2819009.2819252,
  author = 	 {Hermans, Felienne and Paige, Richard F. and Sestoft,
                  Peter},
  title = 	 {{2Nd International Workshop on Software Engineering
                  Methods in Spreadsheets (SEMS 2015)}},
  booktitle = 	 {Proceedings of the 37th International Conference on
                  Software Engineering - Volume 2},
  series = 	 {ICSE '15},
  year = 	 {2015},
  location = 	 {Florence, Italy},
  pages = 	 {1005--1006},
  numpages = 	 {2},
  url = 	 {http://dl.acm.org/citation.cfm?id=2819009.2819252},
  acmid = 	 {2819252},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {Spreadsheets are heavily used in industry, because they are easily written and adjusted, using an intuitive visual interface. They often start out as simple tools; however, over time spreadsheets can become increasingly complex, up to the point where they become complicated and inflexible. In many ways, spreadsheet are similar to software: both concern the storage and manipulation of data and the presentation of results to the user. Because of this similarity, many methods and techniques from software engineering can be applied to spreadsheets. The role of SEMS, the International Workshop on Software Engineering Methods in Spreadsheets is to explore the possibilities of applying successful methods from software engineering to spreadsheets. Some, like testing and visualization, have been tried before and can be built upon. For methods that have not yet been tried on spreadsheets, SEMS will serve as a platform for early feedback. The SEMS program included an industrial keynote, "spreadsheet stories" (success or failure), short and long research papers, a good mix of industrial and academic researchers, as well as lively discussion and debate.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2819252&ftid=1617135&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:57>},
  notes = 	 {Workshop proceedings intro. Don't read.},
}
@inproceedings{Barik:2015:FUR:2820518.2820594,
  author = 	 {Barik, Titus and Lubick, Kevin and Smith, Justin and
                  Slankas, John and Murphy-Hill, Emerson},
  title = 	 {{Fuse: A Reproducible, Extendable, Internet-scale
                  Corpus of Spreadsheets}},
  booktitle = 	 {Proceedings of the 12th Working Conference on Mining
                  Software Repositories},
  series = 	 {MSR '15},
  year = 	 {2015},
  location = 	 {Florence, Italy},
  pages = 	 {486--489},
  numpages = 	 {4},
  url = 	 {http://dl.acm.org/citation.cfm?id=2820518.2820594},
  acmid = 	 {2820594},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {Spreadsheets are perhaps the most ubiquitous form of end-user programming software. This paper describes a corpus, called Fuse, containing 2,127,284 URLs that return spreadsheets (and their HTTP server responses), and 249,376 unique spreadsheets, contained within a public web archive of over 26.83 billion pages. Obtained using nearly 60,000 hours of computation, the resulting corpus exhibits several useful properties over prior spreadsheet corpora, including reproducibility and extendability. Our corpus is unencumbered by any license agreements, available to all, and intended for wide usage by end-user software engineering researchers. In this paper, we detail the data and the spreadsheet extraction process, describe the data schema, and discuss the trade-offs of Fuse with other corpora.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2820594&ftid=1617946&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:09:59>},
  notes = 	 {Spreadsheet corpus. Low priority read.},
}
@inproceedings{Spenke:1989:SIL:67449.67466,
  author = 	 {Spenke, M. and Beilken, C.},
  title = 	 {{A Spreadsheet Interface for Logic Programming}},
  booktitle = 	 {Proceedings of the SIGCHI Conference on Human
                  Factors in Computing Systems},
  series = 	 {CHI '89},
  year = 	 {1989},
  isbn = 	 {0-89791-301-9},
  pages = 	 {75--80},
  numpages = 	 {6},
  url = 	 {http://doi.acm.org/10.1145/67449.67466},
  doi = 	 {10.1145/67449.67466},
  acmid = 	 {67466},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We present PERPLEX, a programming environment intended for the end-user. In its design, the concepts of logic programming and spreadsheets are combined. Thus, on the one hand, logic programming becomes an interactive, incremental task where the user gets direct visual feedback, on the other hand, functionality and scope of a conventional spreadsheet program are considerably extended. In order to perform calculations and queries, constraints are imposed on the contents of the spreadsheet cells. New predicates can be defined using a programming-by-example technique: Rules are extracted from the user's solutions for example problems. Thus, concrete intermediate results take over the role of abstract logic variables in the programming process. PERPLEX has been successfully implemented on a Symbolics Lisp Machine.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=67466&ftid=5734&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:01>},
  notes = 	 {Spreadsheets and logic programming or constraint programming. Low priority read.},
}
@article{Spenke:1989:SIL:67450.67466,
  author = 	 {Spenke, M. and Beilken, C.},
  title = 	 {{A Spreadsheet Interface for Logic Programming}},
  journal = 	 {SIGCHI Bull.},
  volume = 	 {20},
  number = 	 {SI},
  month = 	 {mar},
  year = 	 {1989},
  issn = 	 {0736-6906},
  pages = 	 {75--80},
  numpages = 	 {6},
  url = 	 {http://doi.acm.org/10.1145/67450.67466},
  doi = 	 {10.1145/67450.67466},
  acmid = 	 {67466},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We present PERPLEX, a programming environment intended for the end-user. In its design, the concepts of logic programming and spreadsheets are combined. Thus, on the one hand, logic programming becomes an interactive, incremental task where the user gets direct visual feedback, on the other hand, functionality and scope of a conventional spreadsheet program are considerably extended. In order to perform calculations and queries, constraints are imposed on the contents of the spreadsheet cells. New predicates can be defined using a programming-by-example technique: Rules are extracted from the user's solutions for example problems. Thus, concrete intermediate results take over the role of abstract logic variables in the programming process. PERPLEX has been successfully implemented on a Symbolics Lisp Machine.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=67466&ftid=5734&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:02>},
  notes = 	 {Spreadsheets and logic programming or constraint programming. Low priority read. },
}
@article{Burnett:2002:SMD:586081.586083,
  author = 	 {Burnett, Margaret and Yang, Sherry and Summet, Jay},
  title = 	 {{A Scalable Method for Deductive Generalization in
                  the Spreadsheet Paradigm}},
  journal = 	 {ACM Trans. Comput.-Hum. Interact.},
  issue_date = 	 {December 2002},
  volume = 	 {9},
  number = 	 {4},
  month = 	 {dec},
  year = 	 {2002},
  issn = 	 {1073-0516},
  pages = 	 {253--284},
  numpages = 	 {32},
  url = 	 {http://doi.acm.org/10.1145/586081.586083},
  doi = 	 {10.1145/586081.586083},
  acmid = 	 {586083},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {Forms/3, Human-computer interaction, concrete
                  programming, generalization, graphical programming,
                  spreadsheet languages},
  abstract = 	 {In this paper, we present an efficient method for automatically generalizing programs written in spreadsheet languages. The strategy is to do generalization through incremental analysis of logical relationships among concrete program entities from the perspective of a particular computational goal. The method uses deductive dataflow analysis with algebraic back-substitution rather than inference with heuristics, and there is no need for generalization-related dialog with the user. We present the algorithms and their time complexities and show that, because the algorithms perform their analyses incrementally, on only the on-screen program elements rather than on the entire program, the method is scalable. Performance data is presented to help demonstrate the scalability.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=586083&ftid=86667&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:04>},
  notes = 	 {Spreadsheets and logic programming or constraint programming. Low priority read. },
}
@inproceedings{Saint-Paul:2008:DSY:1353343.1353427,
  author = 	 {Saint-Paul, R{\'e}gis and Benatallah, Boualem and
                  Vayssi\`{e}re, Julien},
  title = 	 {{Data Services in Your Spreadsheet!}},
  booktitle = 	 {Proceedings of the 11th International Conference on
                  Extending Database Technology: Advances in Database
                  Technology},
  series = 	 {EDBT '08},
  year = 	 {2008},
  isbn = 	 {978-1-59593-926-5},
  location = 	 {Nantes, France},
  pages = 	 {690--694},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1353343.1353427},
  doi = 	 {10.1145/1353343.1353427},
  acmid = 	 {1353427},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {End-user programmers---the 45 million of them, as estimated for 2001 in US alone [7]---routinely use spreadsheet to visualize, manipulate, and analyze data. Thanks to this environment, they can build applications that solve their daily problems. Even building a report can be seen as programming an application that takes corporate data as input and outputs a presentation. To build this application, spreadsheet users have to import data and place them in spreadsheet cells, highlight the important pieces, compute maybe some aggregates, add a chart or two. If well done, this application will be used each time data are updated to effortlessly produce a fresh report.},
  review = 	 {fbie: rejected <2016-01-29 16:10:09>},
  notes = 	 {Background on spreadsheet end-user development. Low priority read.},
}
@inproceedings{Singh:2016:TSD:2837614.2837668,
  author = 	 {Singh, Rishabh and Gulwani, Sumit},
  title = 	 {{Transforming Spreadsheet Data Types Using Examples}},
  booktitle = 	 {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT
                  Symposium on Principles of Programming Languages},
  series = 	 {POPL 2016},
  year = 	 {2016},
  isbn = 	 {978-1-4503-3549-2},
  location = 	 {St. Petersburg, FL, USA},
  pages = 	 {343--356},
  numpages = 	 {14},
  url = 	 {http://doi.acm.org/10.1145/2837614.2837668},
  doi = 	 {10.1145/2837614.2837668},
  acmid = 	 {2837668},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {Noisy Examples, Probabilistic Synthesis, Program
                  Synthesis, Programming By Examples, Spreadsheet
                  Programming},
  abstract = 	 {Cleaning spreadsheet data types is a common problem faced by millions of spreadsheet users. Data types such as date, time, name, and units are ubiquitous in spreadsheets, and cleaning transformations on these data types involve parsing and pretty printing their string representations. This presents many challenges to users because cleaning such data requires some background knowledge about the data itself and moreover this data is typically non-uniform, unstructured, and ambiguous. Spreadsheet systems and Programming Languages provide some UI-based and programmatic solutions for this problem but they are either insufficient for the user&#039;s needs or are beyond their expertise. In this paper, we present a programming by example methodology of cleaning data types that learns the desired transformation from a few input-output examples. We propose a domain specific language with probabilistic semantics that is parameterized with declarative data type definitions. The probabilistic semantics is based on three key aspects: (i) approximate predicate matching, (ii) joint learning of data type interpretation, and (iii) weighted branches. This probabilistic semantics enables the language to handle non-uniform, unstructured, and ambiguous data. We then present a synthesis algorithm that learns the desired program in this language from a set of input-output examples. We have implemented our algorithm as an Excel add-in and present its successful evaluation on 55 benchmark problems obtained from online help forums and Excel product team.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2837668&ftid=1659057&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:10:18>},
  notes = 	 {Must read -- interesting type approach.},
}
@inproceedings{Gulwani:2011:ASP:1926385.1926423,
  author = 	 {Gulwani, Sumit},
  title = 	 {{Automating String Processing in Spreadsheets Using
                  Input-output Examples}},
  booktitle = 	 {Proceedings of the 38th Annual ACM SIGPLAN-SIGACT
                  Symposium on Principles of Programming Languages},
  series = 	 {POPL '11},
  year = 	 {2011},
  isbn = 	 {978-1-4503-0490-0},
  location = 	 {Austin, Texas, USA},
  pages = 	 {317--330},
  numpages = 	 {14},
  url = 	 {http://doi.acm.org/10.1145/1926385.1926423},
  doi = 	 {10.1145/1926385.1926423},
  acmid = 	 {1926423},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {program synthesis, programming by example (pbe),
                  spreadsheet programming, string manipulation, user
                  intent, version space algebra},
  abstract = 	 {We describe the design of a string programming/expression language that supports restricted forms of regular expressions, conditionals and loops. The language is expressive enough to represent a wide variety of string manipulation tasks that end-users struggle with. We describe an algorithm based on several novel concepts for synthesizing a desired program in this language from input-output examples. The synthesis algorithm is very efficient taking a fraction of a second for various benchmark examples. The synthesis algorithm is interactive and has several desirable features: it can rank multiple solutions and has fast convergence, it can detect noise in the user input, and it supports an active interaction model wherein the user is prompted to provide outputs on inputs that may have multiple computational interpretations. The algorithm has been implemented as an interactive add-in for Microsoft Excel spreadsheet system. The prototype tool has met the golden test - it has synthesized part of itself, and has been used to solve problems beyond author's imagination.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1926423&ftid=907639&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:23>},
  notes = 	 {Programming by example, spreadsheet synthesis. Low priority read but interesting, may be implemented in Funcalc some day.},
}
@article{Gulwani:2011:ASP:1925844.1926423,
  author = 	 {Gulwani, Sumit},
  title = 	 {{Automating String Processing in Spreadsheets Using
                  Input-output Examples}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {January 2011},
  volume = 	 {46},
  number = 	 {1},
  month = 	 {jan},
  year = 	 {2011},
  issn = 	 {0362-1340},
  pages = 	 {317--330},
  numpages = 	 {14},
  url = 	 {http://doi.acm.org/10.1145/1925844.1926423},
  doi = 	 {10.1145/1925844.1926423},
  acmid = 	 {1926423},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {program synthesis, programming by example (pbe),
                  spreadsheet programming, string manipulation, user
                  intent, version space algebra},
  abstract = 	 {We describe the design of a string programming/expression language that supports restricted forms of regular expressions, conditionals and loops. The language is expressive enough to represent a wide variety of string manipulation tasks that end-users struggle with. We describe an algorithm based on several novel concepts for synthesizing a desired program in this language from input-output examples. The synthesis algorithm is very efficient taking a fraction of a second for various benchmark examples. The synthesis algorithm is interactive and has several desirable features: it can rank multiple solutions and has fast convergence, it can detect noise in the user input, and it supports an active interaction model wherein the user is prompted to provide outputs on inputs that may have multiple computational interpretations. The algorithm has been implemented as an interactive add-in for Microsoft Excel spreadsheet system. The prototype tool has met the golden test - it has synthesized part of itself, and has been used to solve problems beyond author's imagination.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1926423&ftid=907639&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:32>},
}
@inproceedings{Cunha:2012:TEB:2667089.2667096,
  author = 	 {Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo and
                  Mendes, Jorge and Saraiva, Jo\~{a}o},
  title = 	 {{Towards an Evaluation of Bidirectional Model-driven
                  Spreadsheets}},
  booktitle = 	 {Proceedings of the First International Workshop on
                  User Evaluation for Software Engineering
                  Researchers},
  series = 	 {USER '12},
  year = 	 {2012},
  isbn = 	 {978-1-4673-1859-4},
  location = 	 {Zurich, Switzerland},
  pages = 	 {25--28},
  numpages = 	 {4},
  url = 	 {http://dl.acm.org/citation.cfm?id=2667089.2667096},
  acmid = 	 {2667096},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  keywords = 	 {bidirectional transformations, embedded DSLS, model
                  inference, model-driven engineering, software
                  evolution, spreadsheets},
  abstract = 	 {Spreadsheets are widely recognized as popular programming systems with a huge number of spreadsheets being created every day. Also, spreadsheets are often used in the decision processes of profit-oriented companies. While this illustrates their practical importance, studies have shown that up to 90\% of real-world spreadsheets contain errors. In order to improve the productivity of spreadsheet end-users, the software engineering community has proposed to employ model-driven approaches to spreadsheet development. In this paper we describe the evaluation of a bidirectional model-driven spreadsheet environment. In this environment, models and data instances are kept in conformity, even after an update on any of these artifacts. We describe the issues of an empirical study we plan to conduct, based on our previous experience with end-user studies. Our goal is to assess if this model-driven spreadsheet development framework does in fact contribute to improve the productivity of spreadsheet users.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2667096&ftid=1498015&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:34>},
  notes = 	 {Spreadsheet model-driven development. Low priority read.},
}
@inproceedings{Mendes:2012:CEM:2337223.2337500,
  author = 	 {Mendes, Jorge},
  title = 	 {{Coupled Evolution of Model-driven Spreadsheets}},
  booktitle = 	 {Proceedings of the 34th International Conference on
                  Software Engineering},
  series = 	 {ICSE '12},
  year = 	 {2012},
  isbn = 	 {978-1-4673-1067-3},
  location = 	 {Zurich, Switzerland},
  pages = 	 {1616--1618},
  numpages = 	 {3},
  url = 	 {http://dl.acm.org/citation.cfm?id=2337223.2337500},
  acmid = 	 {2337500},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {Spreadsheets are increasingly used as programming languages, in the construction of large and complex systems. The fact is that spreadsheets, being a highly flexible framework, lack important programming language features such as abstraction or encapsulation. This flexibility, however, comes with a price: spreadsheets are populated with significant amounts of errors. One of the approaches that try to overcome this problem advocates the use of model-driven spreadsheet development: a spreadsheet model is defined, from which a concrete spreadsheet is generated. Although this approach has been proved effective in other contexts, still it needs to accommodate for future evolution of both the model and its instance, so that they remain synchronized at all moments. In this paper, we propose a pair of transformation sets, one working at the model level and the other at the instance level, such that each transformation in one set is related to a transformation in the other set. With our approach, we ensure model/data compliance while allowing for model and data evolution.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2337500&ftid=1265077&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:35>},
  notes = 	 {Spreadsheet model-driven development. Low priority read.},
}
@inproceedings{Cunha:2012:BMS:2337223.2337443,
  author = 	 {Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo and
                  Mendes, Jorge and Saraiva, Jo\~{a}o},
  title = 	 {{A Bidirectional Model-driven Spreadsheet
                  Environment}},
  booktitle = 	 {Proceedings of the 34th International Conference on
                  Software Engineering},
  series = 	 {ICSE '12},
  year = 	 {2012},
  isbn = 	 {978-1-4673-1067-3},
  location = 	 {Zurich, Switzerland},
  pages = 	 {1443--1444},
  numpages = 	 {2},
  url = 	 {http://dl.acm.org/citation.cfm?id=2337223.2337443},
  acmid = 	 {2337443},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {In this extended abstract we present a bidirectional model-driven framework to develop spreadsheets. By being model driven, our approach allows to evolve a spreadsheet model and automatically have the data co-evolved. The bidirectional component achieves precisely the inverse, that is, to evolve the data and automatically obtain a new model to which the data conforms.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2337443&ftid=1265026&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:37>},
  notes = 	 {Spreadsheet model-driven development. Low priority read.},
}
@inproceedings{Vemuri:1992:DDD:503720.503808,
  author = 	 {Vemuri, Sarat and Sengupta, Shankar and Davis,
                  J. Steve},
  title = 	 {{Data Dependency Diagrams for Spreadsheet
                  Applications}},
  booktitle = 	 {Proceedings of the 30th Annual Southeast Regional
                  Conference},
  series = 	 {ACM-SE 30},
  year = 	 {1992},
  isbn = 	 {0-89791-506-2},
  location = 	 {Raleigh, North Carolina},
  pages = 	 {467--470},
  numpages = 	 {4},
  url = 	 {http://doi.acm.org/10.1145/503720.503808},
  doi = 	 {10.1145/503720.503808},
  acmid = 	 {503808},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We conducted experiments to evaluate on-line data dependency diagrams for spreadsheets. Results were consistent those of earlier experiments with written data dependency diagrams. Although users had no trouble browsing the on-line diagrams, the diagrams did not seem to improve the performance of a maintenance task on a small spreadsheet. The diagrams may be helpful for larger spreadsheets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=503808&ftid=69381&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:39>},
  notes = 	 {Understanding and debugging. Low priority read.},
}
@inproceedings{Cox:1994:UVP:192309.192343,
  author = 	 {Cox, Philip T. and Smedley, Trevor J.},
  title = 	 {{Using Visual Programming to Extend the Power of
                  Spreadsheet}},
  booktitle = 	 {Proceedings of the Workshop on Advanced Visual
                  Interfaces},
  series = 	 {AVI '94},
  year = 	 {1994},
  isbn = 	 {0-89791-733-2},
  location = 	 {Bari, Italy},
  pages = 	 {153--161},
  numpages = 	 {9},
  url = 	 {http://doi.acm.org/10.1145/192309.192343},
  doi = 	 {10.1145/192309.192343},
  acmid = 	 {192343},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {We describe a new means for representing computations in spreadsheets based on the visual, object-oriented data-flow language, Prograph, rather than textual arithmetic formulae. This mechanism is illustrated using various examples to show how common spreadsheet operation such as copying and extending formulae is more naturally represented. A formal syntax and semantics is presented. Suggestions are made for how this mechanism may be used to extend the range of applications of spreadsheets from the standard numerical calculations to areas such as symbolic computations and multimedia.},
  review = 	 {fbie: rejected <2016-01-29 16:10:49>},
}
@inproceedings{Fisher:2002:ATC:581339.581359,
  author = 	 {Fisher, Marc and Cao, Mingming and Rothermel, Gregg
                  and Cook, Curtis R. and Burnett, Margaret M.},
  title = 	 {{Automated Test Case Generation for Spreadsheets}},
  booktitle = 	 {Proceedings of the 24th International Conference on
                  Software Engineering},
  series = 	 {ICSE '02},
  year = 	 {2002},
  isbn = 	 {1-58113-472-X},
  location = 	 {Orlando, Florida},
  pages = 	 {141--153},
  numpages = 	 {13},
  url = 	 {http://doi.acm.org/10.1145/581339.581359},
  doi = 	 {10.1145/581339.581359},
  acmid = 	 {581359},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Spreadsheet languages, which include commercial spreadsheets and various research systems, have had a substantial impact on end-user computing. Research shows, however, that spreadsheets often contain faults. Thus, in previous work, we presented a methodology that assists spreadsheet users in testing their spreadsheet formulas. Our empirical studies have shown that this methodology can help end-users test spreadsheets more adequately and efficiently; however, the process of generating test cases can still represent a significant impediment. To address this problem, we have been investigating how to automate test case generation for spreadsheets in ways that support incremental testing and provide immediate visual feedback. We have utilized two techniques for generating test cases, one involving random selection and one involving a goal-oriented approach. We describe these techniques, and report results of an experiment examining their relative costs and benefits.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=581359&ftid=79344&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:51>},
  notes = 	 {Testing. Low priority read.},
}
@article{Reichwein:1999:SSI:331963.331968,
  author = 	 {Reichwein, James and Rothermel, Gregg and Burnett,
                  Margaret},
  title = 	 {{Slicing Spreadsheets: An Integrated Methodology for
                  Spreadsheet Testing and Debugging}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {Jan. 2000},
  volume = 	 {35},
  number = 	 {1},
  month = 	 {dec},
  year = 	 {1999},
  issn = 	 {0362-1340},
  pages = 	 {25--38},
  numpages = 	 {14},
  url = 	 {http://doi.acm.org/10.1145/331963.331968},
  doi = 	 {10.1145/331963.331968},
  acmid = 	 {331968},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Spreadsheet languages, which include commercial spreadsheets and various research systems, have proven to be flexible tools in many domain specific settings. Research shows, however, that spreadsheets often contain faults. We would like to provide at least some of the benefits of formal testing and debugging methodologies to spreadsheet developers. This paper presents an integrated testing and debugging methodology for spreadsheets. To accommodate the modeless and incremental development, testing and debugging activities that occur during spreadsheet creation, our methodology is tightly integrated into the spreadsheet environment. To accommodate the users of spreadsheet languages, we provide an interface to our methodology that does not require an understanding of testing and debugging theory, and that takes advantage of the immediate visual feedback that is characteristic of the spreadsheet paradigm.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=331968&ftid=1304&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:52>},
  notes = 	 {Understanding, debugging, testing. Low priority read.},
}
@inproceedings{Reichwein:1999:SSI:331960.331968,
  author = 	 {Reichwein, James and Rothermel, Gregg and Burnett,
                  Margaret},
  title = 	 {{Slicing Spreadsheets: An Integrated Methodology for
                  Spreadsheet Testing and Debugging}},
  booktitle = 	 {Proceedings of the 2Nd Conference on Domain-specific
                  Languages},
  series = 	 {DSL '99},
  year = 	 {1999},
  isbn = 	 {1-58113-255-7},
  location = 	 {Austin, Texas, USA},
  pages = 	 {25--38},
  numpages = 	 {14},
  url = 	 {http://doi.acm.org/10.1145/331960.331968},
  doi = 	 {10.1145/331960.331968},
  acmid = 	 {331968},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Spreadsheet languages, which include commercial spreadsheets and various research systems, have proven to be flexible tools in many domain specific settings. Research shows, however, that spreadsheets often contain faults. We would like to provide at least some of the benefits of formal testing and debugging methodologies to spreadsheet developers. This paper presents an integrated testing and debugging methodology for spreadsheets. To accommodate the modeless and incremental development, testing and debugging activities that occur during spreadsheet creation, our methodology is tightly integrated into the spreadsheet environment. To accommodate the users of spreadsheet languages, we provide an interface to our methodology that does not require an understanding of testing and debugging theory, and that takes advantage of the immediate visual feedback that is characteristic of the spreadsheet paradigm.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=331968&ftid=1304&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:10:54>},
  notes = 	 {Understanding, debugging, testing. Low priority read.},
}
@article{Isakowitz:1995:TLT:195705.195708,
  author = 	 {Isakowitz, Tom\'{a}s and Schocken, Shimon and
                  Lucas,Jr., Henry C.},
  title = 	 {{Toward a Logical/Physical Theory of Spreadsheet
                  Modeling}},
  journal = 	 {ACM Trans. Inf. Syst.},
  issue_date = 	 {Jan. 1995},
  volume = 	 {13},
  number = 	 {1},
  month = 	 {jan},
  year = 	 {1995},
  issn = 	 {1046-8188},
  pages = 	 {1--37},
  numpages = 	 {37},
  url = 	 {http://doi.acm.org/10.1145/195705.195708},
  doi = 	 {10.1145/195705.195708},
  acmid = 	 {195708},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {model management},
  abstract = 	 {In spite of the increasing sophistication and power of commercial spreadsheet packages, we still lack a formal theory or a methodology to support the construction and maintenance of spreadsheet models. Using a dual logical/physical perspective, we identify four principal components that characterize any spread sheet model: schema, data, editorial, and binding. We present a factoring algorithm for identifying and extracting these components from conventional spreadsheets with minimal user intervention, and a synthesis algorithm that assists users in the construction of executable spreadsheets from reusable model components. This approach opens new possibilities for applying object-oriented and model management  techniques to support the construction, sharing, and reuse of spreadsheet models in organizations. Importantly, our approach to model management and the Windows-based prototype that we have developed are designed to coexist with, rather than replace, traditional spreadsheet programs. In other words, the users are not required to learn a new modeling language; instead, their logical models and data sets are extracted from their spreadsheets transparently, as a side-effect of using standard spreadsheet programs.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=195708&ftid=36921&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:11:00>},
  notes = 	 {Modeling and understanding. Middle priority read, may contain some useful concepts.},
}
@inproceedings{Hermans:2013:DCD:2486788.2486827,
  author = 	 {Hermans, Felienne and Sedee, Ben and Pinzger, Martin
                  and Deursen, Arie van},
  title = 	 {{Data Clone Detection and Visualization in
                  Spreadsheets}},
  booktitle = 	 {Proceedings of the 2013 International Conference on
                  Software Engineering},
  series = 	 {ICSE '13},
  year = 	 {2013},
  isbn = 	 {978-1-4673-3076-3},
  location = 	 {San Francisco, CA, USA},
  pages = 	 {292--301},
  numpages = 	 {10},
  url = 	 {http://dl.acm.org/citation.cfm?id=2486788.2486827},
  acmid = 	 {2486827},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {Spreadsheets are widely used in industry: it is estimated that end-user programmers outnumber programmers by a factor 5. However, spreadsheets are error-prone, numerous companies have lost money because of spreadsheet errors. One of the causes for spreadsheet problems is the prevalence of copy-pasting.   In this paper, we study this cloning in spreadsheets. Based on existing text-based clone detection algorithms, we have developed an algorithm to detect data clones in spreadsheets: formulas whose values are copied as plain text in a different location.   To evaluate the usefulness of the proposed approach, we conducted two evaluations. A quantitative evaluation in which we analyzed the EUSES corpus and a qualitative evaluation consisting of two case studies. The results of the evaluation clearly indicate that 1) data clones are common, 2) data clones pose threats to spreadsheet quality and 3) our approach supports users in finding and resolving data clones.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2486827&ftid=1372473&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:02>},
  notes = 	 {Understanding and visualization. Low priority read.},
}
@inproceedings{Hermans:2012:DVI:2337223.2337275,
  author = 	 {Hermans, Felienne and Pinzger, Martin and Deursen,
                  Arie van},
  title = 	 {{Detecting and Visualizing Inter-worksheet Smells in
                  Spreadsheets}},
  booktitle = 	 {Proceedings of the 34th International Conference on
                  Software Engineering},
  series = 	 {ICSE '12},
  year = 	 {2012},
  isbn = 	 {978-1-4673-1067-3},
  location = 	 {Zurich, Switzerland},
  pages = 	 {441--451},
  numpages = 	 {11},
  url = 	 {http://dl.acm.org/citation.cfm?id=2337223.2337275},
  acmid = 	 {2337275},
  publisher = 	 {IEEE Press},
  address = 	 {Piscataway, NJ, USA},
  abstract = 	 {Spreadsheets are often used in business, for simple tasks, as well as for mission critical tasks such as finance or forecasting. Similar to software, some spreadsheets are of better quality than others, for instance with respect to usability, maintainability or reliability. In contrast with software however, spreadsheets are rarely checked, tested or certified. In this paper, we aim at developing an approach for detecting smells that indicate weak points in a spreadsheet's design. To that end we first study code smells and transform these code smells to their spreadsheet counterparts. We then present an approach to detect the smells, and communicate located smells to spreadsheet users with data flow diagrams. We analyzed occurrences of these smells in the Euses corpus. Furthermore we conducted ten case studies in an industrial setting. The results of the evaluation indicate that smells can indeed reveal weaknesses in a spreadsheet's design, and that data flow diagrams are an appropriate way to show those weaknesses.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2337275&ftid=1264917&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:04>},
  notes = 	 {Understanding and visualization. Low priority read.},
}
@inproceedings{Burnett:2003:ESE:776816.776828,
  author = 	 {Burnett, Margaret and Cook, Curtis and Pendse, Omkar
                  and Rothermel, Gregg and Summet, Jay and Wallace,
                  Chris},
  title = 	 {{End-user Software Engineering with Assertions in the
                  Spreadsheet Paradigm}},
  booktitle = 	 {Proceedings of the 25th International Conference on
                  Software Engineering},
  series = 	 {ICSE '03},
  year = 	 {2003},
  isbn = 	 {0-7695-1877-X},
  location = 	 {Portland, Oregon},
  pages = 	 {93--103},
  numpages = 	 {11},
  url = 	 {http://dl.acm.org/citation.cfm?id=776816.776828},
  acmid = 	 {776828},
  publisher = 	 {IEEE Computer Society},
  address = 	 {Washington, DC, USA},
  abstract = 	 {There has been little research on end-user program development beyond the activity of programming. Devising ways to address additional activities related to end-user program development may be critical, however, because research shows that a large proportion of the programs written by end users contain faults. Toward this end, we have been working on ways to provide formal "software engineering" methodologies to end-user programmers. This paper describes an approach we have developed for supporting assertions in end-user software, focusing on the spreadsheet paradigm. We also report the results of a controlled experiment, with 59 end-user subjects, to investigate the usefulness of this approach. Our results show that the end users were able to use the assertions to reason about their spreadsheets, and that doing so was tied to both greater correctness and greater efficiency.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=776828&ftid=148316&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:07>},
  notes = 	 {Quality assurance, testing, validation, empirical study. Low priority read.},
}
@inproceedings{Abraham:2006:TIS:1140335.1140346,
  author = 	 {Abraham, Robin and Erwig, Martin},
  title = 	 {{Type Inference for Spreadsheets}},
  booktitle = 	 {Proceedings of the 8th ACM SIGPLAN International
                  Conference on Principles and Practice of Declarative
                  Programming},
  series = 	 {PPDP '06},
  year = 	 {2006},
  isbn = 	 {1-59593-388-3},
  location = 	 {Venice, Italy},
  pages = 	 {73--84},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/1140335.1140346},
  doi = 	 {10.1145/1140335.1140346},
  acmid = 	 {1140346},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user software engineering, templates, type
                  inference},
  abstract = 	 {Spreadsheets are the most popular programming systems in use today. Since spreadsheets are visual, first-order functional languages, research into the foundations of spreadsheets is therefore a highly relevant topic for the principles and, in particular, the practice, of declarative programming.Since the error rate in spreadsheets is very high and since those errors have significant impact, methods and tools that can help detect and remove errors from spreadsheets are very much needed. Type systems have traditionally played a strong role in detecting errors in programming languages, and it is therefore reasonable to ask whether type systems could not be helpful in improving the current situation of spreadsheet programming.In this paper we introduce a type system and a type inference algorithm for spreadsheets and demonstrate how this algorithm and the underlying typing concept can identify programming errors in spreadsheets. In addition, we also demonstrate how the type inference algorithm can be employed to infer models, or specifications, for spreadsheets, which can be used to prevent future errors in spreadsheets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1140346&ftid=362172&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:11:10>},
  notes = 	 {Types. Must read.},
}
@inproceedings{Harris:2011:STT:1993498.1993536,
  author = 	 {Harris, William R. and Gulwani, Sumit},
  title = 	 {{Spreadsheet Table Transformations from Examples}},
  booktitle = 	 {Proceedings of the 32Nd ACM SIGPLAN Conference on
                  Programming Language Design and Implementation},
  series = 	 {PLDI '11},
  year = 	 {2011},
  isbn = 	 {978-1-4503-0663-8},
  location = 	 {San Jose, California, USA},
  pages = 	 {317--328},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/1993498.1993536},
  doi = 	 {10.1145/1993498.1993536},
  acmid = 	 {1993536},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, program synthesis, programming
                  by example, spreadsheet programming, table
                  manipulation, user intent},
  abstract = 	 {Every day, millions of computer end-users need to perform tasks over large, tabular data, yet lack the programming knowledge to do such tasks automatically. In this work, we present an automatic technique that takes from a user an example of how the user needs to transform a table of data, and provides to the user a program that implements the transformation described by the example. In particular, we present a language of programs TableProg that can describe transformations that real users require.We then present an algorithm ProgFromEx that takes an example input and output table, and infers a program in TableProg that implements the transformation described by the example. When the program is applied to the example input, it reproduces the example output. When the program is applied to another, potentially larger, table with a 'similar' layout as the example input table, then the program produces a corresponding table with a layout that is similar to the example output table. A user can apply ProgFromEx interactively, providing multiple small examples to obtain a program that implements the transformation that the user desires. Moreover, ProgFromEx can help identify 'noisy' examples that contain errors. To evaluate the practicality of TableProg and ProgFromEx, we implemented ProgFromEx as a module for the Microsoft Excel spreadsheet program. We applied the module to automatically implement over 50 table transformations specified by endusers through examples on online Excel help forums. In seconds, ProgFromEx found programs that satisfied the examples and could be applied to larger input tables. This experience demonstrates that TableProg and ProgFromEx can significantly automate the tasks over tabular data that users need to perform.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1993536&ftid=981798&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:12>},
  notes = 	 {Programming by example. Low priority read.},
}
@article{Harris:2011:STT:1993316.1993536,
  author = 	 {Harris, William R. and Gulwani, Sumit},
  title = 	 {{Spreadsheet Table Transformations from Examples}},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {June 2011},
  volume = 	 {46},
  number = 	 {6},
  month = 	 {jun},
  year = 	 {2011},
  issn = 	 {0362-1340},
  pages = 	 {317--328},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/1993316.1993536},
  doi = 	 {10.1145/1993316.1993536},
  acmid = 	 {1993536},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, program synthesis, programming
                  by example, spreadsheet programming, table
                  manipulation, user intent},
  abstract = 	 {Every day, millions of computer end-users need to perform tasks over large, tabular data, yet lack the programming knowledge to do such tasks automatically. In this work, we present an automatic technique that takes from a user an example of how the user needs to transform a table of data, and provides to the user a program that implements the transformation described by the example. In particular, we present a language of programs TableProg that can describe transformations that real users require.We then present an algorithm ProgFromEx that takes an example input and output table, and infers a program in TableProg that implements the transformation described by the example. When the program is applied to the example input, it reproduces the example output. When the program is applied to another, potentially larger, table with a 'similar' layout as the example input table, then the program produces a corresponding table with a layout that is similar to the example output table. A user can apply ProgFromEx interactively, providing multiple small examples to obtain a program that implements the transformation that the user desires. Moreover, ProgFromEx can help identify 'noisy' examples that contain errors. To evaluate the practicality of TableProg and ProgFromEx, we implemented ProgFromEx as a module for the Microsoft Excel spreadsheet program. We applied the module to automatically implement over 50 table transformations specified by endusers through examples on online Excel help forums. In seconds, ProgFromEx found programs that satisfied the examples and could be applied to larger input tables. This experience demonstrates that TableProg and ProgFromEx can significantly automate the tasks over tabular data that users need to perform.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1993536&ftid=981798&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:16>},
}
@article{Fisher:2006:IAT:1131421.1131423,
  author = 	 {Fisher,II, Marc and Rothermel, Gregg and Brown,
                  Darren and Cao, Mingming and Cook, Curtis and
                  Burnett, Margaret},
  title = 	 {Integrating Automated Test Generation into the
                  WYSIWYT Spreadsheet Testing Methodology},
  journal = 	 {ACM Trans. Softw. Eng. Methodol.},
  issue_date = 	 {April 2006},
  volume = 	 {15},
  number = 	 {2},
  month = 	 {apr},
  year = 	 {2006},
  issn = 	 {1049-331X},
  pages = 	 {150--194},
  numpages = 	 {45},
  url = 	 {http://doi.acm.org/10.1145/1131421.1131423},
  doi = 	 {10.1145/1131421.1131423},
  acmid = 	 {1131423},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {End-user software engineering, end-user programming,
                  test case generation, testing},
  abstract = 	 {Spreadsheet languages, which include commercial spreadsheets and various research systems, have had a substantial impact on end-user computing. Research shows, however, that spreadsheets often contain faults. Thus, in previous work we presented a methodology that helps spreadsheet users test their spreadsheet formulas. Our empirical studies have shown that end users can use this methodology to test spreadsheets more adequately and efficiently; however, the process of generating test cases can still present a significant impediment. To address this problem, we have been investigating how to incorporate automated test case generation into our testing methodology in ways that support incremental testing and provide immediate visual feedback. We have used two techniques for generating test cases, one involving random selection and one involving a goal-oriented approach. We describe these techniques and their integration into our testing environment, and report results of an experiment examining their effectiveness and efficiency.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1131423&ftid=357704&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:17>},
  notes = 	 {Testing. Low priority read.},
}
@inproceedings{Babbitt:1998:ISS:353053.353087,
  author = 	 {Babbitt, Timothy G. and Galletta, Dennis F. and
                  Lopes, Alexandre B.},
  title = 	 {Influencing the Success of Spreadsheet Development
                  by Novice Users},
  booktitle = 	 {Proceedings of the International Conference on
                  Information Systems},
  series = 	 {ICIS '98},
  year = 	 {1998},
  location = 	 {Helsinki, Finland},
  pages = 	 {319--324},
  numpages = 	 {6},
  url = 	 {http://dl.acm.org/citation.cfm?id=353053.353087},
  acmid = 	 {353087},
  publisher = 	 {Association for Information Systems},
  address = 	 {Atlanta, GA, USA},
  abstract = 	 {An abstract is not available.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=353087&ftid=3821&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:26>},
  notes = 	 {Unclear. Seems low priority.},
}
@inproceedings{Jankun-Kelly:2000:SIV:375213.375220,
  author = 	 {Jankun-Kelly, T. J. and Ma, Kwan-Liu},
  title = 	 {A Spreadsheet Interface for Visualization
                  Exploration},
  booktitle = 	 {{Proceedings of the Conference on Visualization '00}},
  series = 	 {VIS '00},
  year = 	 {2000},
  isbn = 	 {1-58113-309-X},
  location = 	 {Salt Lake City, Utah, USA},
  pages = 	 {69--76},
  numpages = 	 {8},
  url = 	 {http://dl.acm.org/citation.cfm?id=375213.375220},
  acmid = 	 {375220},
  publisher = 	 {IEEE Computer Society Press},
  address = 	 {Los Alamitos, CA, USA},
  keywords = 	 {knowledge representation, scientific visualization,
                  spreadsheets, user interfaces, visualization
                  systems, volume rendering},
  abstract = 	 {An abstract is not available.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=375220&ftid=76352&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:28>},
  notes = 	 {Visualization. Seems low priority.},
}
@article{Ronen:1989:SAD:63238.63244,
  author = 	 {Ronen, Boaz and Palley, Michael A and Lucas,Jr.,
                  Henry C.},
  title = 	 {{Spreadsheet Analysis and Design}},
  journal = 	 {Commun. ACM},
  issue_date = 	 {Jan. 1989},
  volume = 	 {32},
  number = 	 {1},
  month = 	 {jan},
  year = 	 {1989},
  issn = 	 {0001-0782},
  pages = 	 {84--93},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/63238.63244},
  doi = 	 {10.1145/63238.63244},
  acmid = 	 {63244},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Although spreadsheet programs and microcomputers have revolutionized information processing in organizations, a significant number of serious errors have been reported through the misuse of this technology. This article discusses several different contexts for the development of spreadsheet models and presents structured design techniques for these models.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=63244&ftid=19968&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:38>},
  notes = 	 {Model-driven design. Low priority.},
}
@article{Gulwani:2012:SDM:2240236.2240260,
  author = 	 {Gulwani, Sumit and Harris, William R. and Singh,
                  Rishabh},
  title = 	 {{Spreadsheet Data Manipulation Using Examples}},
  journal = 	 {Commun. ACM},
  issue_date = 	 {August 2012},
  volume = 	 {55},
  number = 	 {8},
  month = 	 {aug},
  year = 	 {2012},
  issn = 	 {0001-0782},
  pages = 	 {97--105},
  numpages = 	 {9},
  url = 	 {http://doi.acm.org/10.1145/2240236.2240260},
  doi = 	 {10.1145/2240236.2240260},
  acmid = 	 {2240260},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  abstract = 	 {Millions of computer end users need to perform tasks over large spreadsheet data, yet lack the programming knowledge to do such tasks automatically. We present a programming by example methodology that allows end users to automate such repetitive tasks. Our methodology involves designing a domain-specific language and developing a synthesis algorithm that can learn programs in that language from user-provided examples. We present instantiations of this methodology for particular domains of tasks: (a) syntactic transformations of strings using restricted forms of regular expressions, conditionals, and loops, (b) semantic transformations of strings involving lookup in relational tables, and (c) layout transformations on spreadsheet tables. We have implemented this technology as an add-in for the Microsoft Excel Spreadsheet system and have evaluated it successfully over several benchmarks picked from various Excel help forums.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2240260&ftid=1265813&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:40>},
  notes = 	 {Programming by examples. Low priority.},
}
@inproceedings{Levoy:1994:SI:192161.192190,
  author = 	 {Levoy, Marc},
  title = 	 {{Spreadsheets for Images}},
  booktitle = 	 {Proceedings of the 21st Annual Conference on
                  Computer Graphics and Interactive Techniques},
  series = 	 {SIGGRAPH '94},
  year = 	 {1994},
  isbn = 	 {0-89791-667-0},
  pages = 	 {139--146},
  numpages = 	 {8},
  url = 	 {http://doi.acm.org/10.1145/192161.192190},
  doi = 	 {10.1145/192161.192190},
  acmid = 	 {192190},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {data visualization, flow charts, spreadsheets, user
                  interfaces, visual programming languages},
  abstract = 	 {We describe a data visualization system based on spreadsheets. Cells in our spreadsheet contain graphical objects such as images, volumes, or movies. Cells may also contain widgets such as buttons, sliders, or curve editors. Objects are displayed in miniature inside each cell. Formulas for cells are written in a general-purpose programming language (Tcl) augmented with operators for array manipulation, image processing, and rendering.Compared to flow chart visualization systems, spreadsheets are more expressive, morescalable, and easier to program. Compared to conventional numerical spreadsheets, spreadsheets for images pose several unique design problems: larger formulas, longer computation times, and more complicated intercelldependencies. In response to these problems, we have extended the spreadsheet paradigm in three ways: formulas can display their results anywhere in the spreadsheet, cells can be selectively disabled, and multiple cells can be edited at once. We discuss these extensions and their implications, and we also point out some unexpected uses for our spreadsheets: as a visual database browser, as a graphical user interface builder, as a smart clipboard for the desktop, and as a presentation tool.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=192190&ftid=609020&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:51>},
  notes = 	 {Spreadsheet as image manipulation workbench. Low priority. Might be interesting later as case study, seeking to replace Tcl with SDFs.},
}
@inproceedings{Abraham:2007:GSD:1248820.1248858,
  author = 	 {Abraham, Robin and Erwig, Martin},
  title = 	 {{GoalDebug: A Spreadsheet Debugger for End Users}},
  booktitle = 	 {Proceedings of the 29th International Conference on
                  Software Engineering},
  series = 	 {ICSE '07},
  year = 	 {2007},
  isbn = 	 {0-7695-2828-7},
  pages = 	 {251--260},
  numpages = 	 {10},
  url = 	 {http://dx.doi.org/10.1109/ICSE.2007.39},
  doi = 	 {10.1109/ICSE.2007.39},
  acmid = 	 {1248858},
  publisher = 	 {IEEE Computer Society},
  address = 	 {Washington, DC, USA},
  review = 	 {fbie: rejected <2016-01-29 16:11:52>},
  notes = 	 {Debugging. Low priority.},
}
@inproceedings{Ruthruff:2003:ESV:774833.774851,
  author = 	 {Ruthruff, J. and Creswick, E. and Burnett, M. and
                  Cook, C. and Prabhakararao, S. and Fisher,II, M. and
                  Main, M.},
  title = 	 {End-user Software Visualizations for Fault
                  Localization},
  booktitle = 	 {Proceedings of the 2003 ACM Symposium on Software
                  Visualization},
  series = 	 {SoftVis '03},
  year = 	 {2003},
  isbn = 	 {1-58113-642-0},
  location = 	 {San Diego, California},
  pages = 	 {123--132},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/774833.774851},
  doi = 	 {10.1145/774833.774851},
  acmid = 	 {774851},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, end-user software engineering,
                  end-user software visualization, fault localization,
                  spreadsheets},
  abstract = 	 {End-user programming has become the most common form of programming today. However, despite this growth, there has been little investigation into bringing the benefits of software visualization to end-user programmers. Evidence from the spreadsheet paradigm, probably the most widely used end-user environment, reveals that end users' programs often contain faults. We would like to integrate software visualization into these end-user environments to help end users deal with the reliability issues in their programs. Towards this end, we have devised several fault localization visualization techniques for spreadsheets. This paper describes these techniques and reports the results of a formative study---using tests created by end users---to investigate how these fault localization techniques compare. Our results reveal some strengths and weaknesses of each technique, and provide insights into the cost-effectiveness of each technique for the interactive world of end-user spreadsheet development.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=774851&ftid=155212&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:11:54>},
  notes = 	 {Debugging, visualization. Low prority.},
}
@inproceedings{Erwig:2005:AGM:1062455.1062494,
  author = 	 {Erwig, Martin and Abraham, Robin and Cooperstein,
                  Irene and Kollmansberger, Steve},
  title = 	 {{Automatic Generation and Maintenance of Correct
                  Spreadsheets}},
  booktitle = 	 {Proceedings of the 27th International Conference on
                  Software Engineering},
  series = 	 {ICSE '05},
  year = 	 {2005},
  isbn = 	 {1-58113-963-2},
  location = 	 {St. Louis, MO, USA},
  pages = 	 {136--145},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/1062455.1062494},
  doi = 	 {10.1145/1062455.1062494},
  acmid = 	 {1062494},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user software engineering, error prevention,
                  program generation, spreadsheet, template, type
                  system},
  abstract = 	 {Existing spreadsheet systems allow users to change cells arbitrarily, which is a major source of spreadsheet errors. We propose a system that prevents errors in spreadsheets by restricting spreadsheet updates to only those that are logically and technically correct. The system is based on the concept of templates that describe the principal structure of the initial spreadsheet and all of its future versions. We have developed a program generator that translates a template into an initial spreadsheet together with customized update operations for changing cells and inserting/deleting rows and columns for this particular template.We have designed a type system for templates that ensures the following form of "spreadsheet maintenance safety": Update operations that are generated from a type-correct template are proved to transform the spreadsheet only according to the template and to never produce any omission, reference, or type errors.Finally, we have developed a prototype as an extension to Excel, which has been shown by a preliminary usability study to be well accepted by end users.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1062494&ftid=315686&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:02>},
  notes = 	 {Model-driven development. Low priority.},
}
@inproceedings{Rothermel:2000:WTS:337180.337206,
  author = 	 {Rothermel, Karen J. and Cook, Curtis R. and Burnett,
                  Margaret M. and Schonfeld, Justin and Green,
                  T. R. G. and Rothermel, Gregg},
  title = 	 {WYSIWYT Testing in the Spreadsheet Paradigm: An
                  Empirical Evaluation},
  booktitle = 	 {Proceedings of the 22Nd International Conference on
                  Software Engineering},
  series = 	 {ICSE '00},
  year = 	 {2000},
  isbn = 	 {1-58113-206-9},
  location = 	 {Limerick, Ireland},
  pages = 	 {230--239},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/337180.337206},
  doi = 	 {10.1145/337180.337206},
  acmid = 	 {337206},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {empirical studies, spreadsheets, testing, visual
                  programming},
  abstract = 	 {Is it possible to achieve some of the benefits of formal testing within the informal programming conventions of the spreadsheet paradigm? We have been working on an approach that attempts to do so via the development of a testing methodology for this paradigm. Our “What You See Is What You Test” (WYSIWYT) methodology supplements the convention by which spreadsheets provide automatic immediate visual feedback about values by providing automatic immediate visual feedback about “testedness”. In previous work we described this methodology; in this paper, we present empirical data about the methodology's effectiveness. Our results show that the use of the methodology was associated with significant improvement in testing effectiveness and efficiency even with no training on the theory of testing or test adequacy that the model implements. These results may be due at least in part to the fact that use of the methodology was associated with a significant reduction in overconfidence.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=337206&ftid=7032&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:11>},
  notes = 	 {Testing, empirically evaluated. Low priority.},
}
@inproceedings{Miller:2015:SPB:2814189.2814201,
  author = 	 {Miller, Gary},
  title = 	 {{The Spreadsheet Paradigm: A Basis for Powerful and
                  Accessible Programming}},
  booktitle = 	 {Companion Proceedings of the 2015 ACM SIGPLAN
                  International Conference on Systems, Programming,
                  Languages and Applications: Software for Humanity},
  series = 	 {SPLASH Companion 2015},
  year = 	 {2015},
  isbn = 	 {978-1-4503-3722-9},
  location = 	 {Pittsburgh, PA, USA},
  pages = 	 {33--35},
  numpages = 	 {3},
  url = 	 {http://doi.acm.org/10.1145/2814189.2814201},
  doi = 	 {10.1145/2814189.2814201},
  acmid = 	 {2814201},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {Empirical Testing, End-User Programming, Programming
                  Language Design, Spreadsheet Paradigm},
  abstract = 	 {This paper takes a cognition-centric approach for programming languages. It promotes the spreadsheet paradigm, with two concrete goals. First, it calls for the design and implementation of several language features to enhance the expressiveness of spreadsheet programming. Second, it describes a plan for rigorous empirical studies to retain the learnability of spreadsheet programming.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2814201&ftid=1636943&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:12:17>},
  notes = 	 {Possibly interesting as overall motivation.},
}
@inproceedings{Barowy:2015:FER:2737924.2737952,
  author = 	 {Barowy, Daniel W. and Gulwani, Sumit and Hart, Ted
                  and Zorn, Benjamin},
  title = 	 {FlashRelate: Extracting Relational Data from
                  Semi-structured Spreadsheets Using Examples},
  booktitle = 	 {Proceedings of the 36th ACM SIGPLAN Conference on
                  Programming Language Design and Implementation},
  series = 	 {PLDI 2015},
  year = 	 {2015},
  isbn = 	 {978-1-4503-3468-6},
  location = 	 {Portland, OR, USA},
  pages = 	 {218--228},
  numpages = 	 {11},
  url = 	 {http://doi.acm.org/10.1145/2737924.2737952},
  doi = 	 {10.1145/2737924.2737952},
  acmid = 	 {2737952},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {data extraction, program synthesis, relational data,
                  spreadsheets},
  abstract = 	 {With hundreds of millions of users, spreadsheets are one of the most important end-user applications. Spreadsheets are easy to use and allow users great flexibility in storing data. This flexibility comes at a price: users often treat spreadsheets as a poor man&#039;s database, leading to creative solutions for storing high-dimensional data. The trouble arises when users need to answer queries with their data. Data manipulation tools make strong assumptions about data layouts and cannot read these ad-hoc databases. Converting data into the appropriate layout requires programming skills or a major investment in manual reformatting. The effect is that a vast amount of real-world data is "locked-in" to a proliferation of one-off formats. We introduce FlashRelate, a synthesis engine that lets ordinary users extract structured relational data from spreadsheets without programming. Instead, users extract data by supplying examples of output relational tuples. FlashRelate uses these examples to synthesize a program in Flare. Flare is a novel extraction language that extends regular expressions with geometric constructs. An interactive user interface on top of FlashRelate lets end users extract data by point-and-click. We demonstrate that correct Flare programs can be synthesized in seconds from a small set of examples for 43 real-world scenarios. Finally, our case study demonstrates FlashRelate&#039;s usefulness addressing the widespread problem of data trapped in corporate and government formats.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2737952&ftid=1588447&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:20>},
  notes = 	 {Spreadsheets as database, programming by example. Low priority read.},
}
@article{Barowy:2015:FER:2813885.2737952,
  author = 	 {Barowy, Daniel W. and Gulwani, Sumit and Hart, Ted
                  and Zorn, Benjamin},
  title = 	 {FlashRelate: Extracting Relational Data from
                  Semi-structured Spreadsheets Using Examples},
  journal = 	 {SIGPLAN Not.},
  issue_date = 	 {June 2015},
  volume = 	 {50},
  number = 	 {6},
  month = 	 {jun},
  year = 	 {2015},
  issn = 	 {0362-1340},
  pages = 	 {218--228},
  numpages = 	 {11},
  url = 	 {http://doi.acm.org/10.1145/2813885.2737952},
  doi = 	 {10.1145/2813885.2737952},
  acmid = 	 {2737952},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {data extraction, program synthesis, relational data,
                  spreadsheets},
  abstract = 	 {With hundreds of millions of users, spreadsheets are one of the most important end-user applications. Spreadsheets are easy to use and allow users great flexibility in storing data. This flexibility comes at a price: users often treat spreadsheets as a poor man&#039;s database, leading to creative solutions for storing high-dimensional data. The trouble arises when users need to answer queries with their data. Data manipulation tools make strong assumptions about data layouts and cannot read these ad-hoc databases. Converting data into the appropriate layout requires programming skills or a major investment in manual reformatting. The effect is that a vast amount of real-world data is "locked-in" to a proliferation of one-off formats. We introduce FlashRelate, a synthesis engine that lets ordinary users extract structured relational data from spreadsheets without programming. Instead, users extract data by supplying examples of output relational tuples. FlashRelate uses these examples to synthesize a program in Flare. Flare is a novel extraction language that extends regular expressions with geometric constructs. An interactive user interface on top of FlashRelate lets end users extract data by point-and-click. We demonstrate that correct Flare programs can be synthesized in seconds from a small set of examples for 43 real-world scenarios. Finally, our case study demonstrates FlashRelate&#039;s usefulness addressing the widespread problem of data trapped in corporate and government formats.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2737952&ftid=1588447&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:23>},
}
@inproceedings{Kankuzi:2008:EOG:1370847.1370866,
  author = 	 {Kankuzi, Bennett and Ayalew, Yirsaw},
  title = 	 {{An End-user Oriented Graph-based Visualization for
                  Spreadsheets}},
  booktitle = 	 {Proceedings of the 4th International Workshop on
                  End-user Software Engineering},
  series = 	 {WEUSE '08},
  year = 	 {2008},
  isbn = 	 {978-1-60558-034-0},
  location = 	 {Leipzig, Germany},
  pages = 	 {86--90},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1370847.1370866},
  doi = 	 {10.1145/1370847.1370866},
  acmid = 	 {1370866},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user software engineering, mcl algorithm,
                  spreadsheets, visual programming, visualization},
  abstract = 	 {One of the difficulties in understanding and debugging spreadsheets is due to the invisibility of the data flow structure which is associated with cell formulas. In this paper, we present a spreadsheet visualization approach that is mainly based on the Markov Clustering (MCL) algorithm in an attempt to help spreadsheet users understand and debug their spreadsheets. The MCL algorithm helps in visualizing large graphs by generating clusters of cells. In our visualization approach, we also use compound fisheye views and treemaps to help in the navigation of the generated clusters. Compound fish eye views help to view members of a particular cluster while showing their linkages with other clusters. Treemaps help to visualize the depth we are at while navigating a cluster tree. Our initial experiments show that graph-based spreadsheet visualization using the MCL algorithm generates clusters which match with the corresponding logical areas of a given spreadsheet. Our experiments also show that analysis of the clusters helps us to identify some errors in the spreadsheets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1370866&ftid=498663&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:25>},
  notes = 	 {Understanding and debugging. Low priority read.},
}
@inproceedings{Chi:1997:SAI:263407.263513,
  author = 	 {Chi, Ed Huai-hsin and Konstan, Joseph and Barry,
                  Phillip and Riedl, John},
  title = 	 {{A Spreadsheet Approach to Information Visualization}},
  booktitle = 	 {Proceedings of the 10th Annual ACM Symposium on User
                  Interface Software and Technology},
  series = 	 {UIST '97},
  year = 	 {1997},
  isbn = 	 {0-89791-881-9},
  location = 	 {Banff, Alberta, Canada},
  pages = 	 {79--80},
  numpages = 	 {2},
  url = 	 {http://doi.acm.org/10.1145/263407.263513},
  doi = 	 {10.1145/263407.263513},
  acmid = 	 {263513},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {information visualization, interactive graphics,
                  spreadsheet, visualization},
  abstract = 	 {An abstract is not available.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=263513&ftid=42002&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:27>},
  notes = 	 {Spreadsheets for visualization. Low priority read.},
}
@inproceedings{Tyszkiewicz:2010:SRD:1807167.1807191,
  author = 	 {Tyszkiewicz, Jerzy},
  title = 	 {{Spreadsheet As a Relational Database Engine}},
  booktitle = 	 {Proceedings of the 2010 ACM SIGMOD International
                  Conference on Management of Data},
  series = 	 {SIGMOD '10},
  year = 	 {2010},
  isbn = 	 {978-1-4503-0032-2},
  location = 	 {Indianapolis, Indiana, USA},
  pages = 	 {195--206},
  numpages = 	 {12},
  url = 	 {http://doi.acm.org/10.1145/1807167.1807191},
  doi = 	 {10.1145/1807167.1807191},
  acmid = 	 {1807191},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {performance, relational algebra, relational
                  databases, spreadsheets, sql},
  abstract = 	 {Spreadsheets are among the most commonly used applications for data management and analysis. Perhaps they are even among the most widely used computer applications of all kinds. However, the spreadsheet paradigm of computation still lacks sufficient analysis. In this paper we demonstrate that a spreadsheet can play the role of a relational database engine, without any use of macros or built-in programming languages, merely by utilizing spreadsheet formulas. We achieve that by implementing all operators of relational algebra by means of spreadsheet functions. Given a definition of a database in SQL, it is therefore possible to construct a spreadsheet workbook with empty worksheets for data tables and worksheets filled with formulas for queries. From then on, when the user enters, alters or deletes data in the data worksheets, the formulas in query worksheets automatically compute the actual results of the queries. Thus, the spreadsheet serves as data storage and executes SQL queries, and therefore acts as a relational database engine. The paper is based on Microsoft Excel (TM), but our constructions work in other spreadsheet systems, too. We present a number of performance tests conducted in the beta version of Excel 2010. Their conclusion is that the performance is sufficient for a desktop database with a couple thousand rows.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1807191&ftid=803616&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:29>},
  notes = 	 {Spreadsheets as database. Low priority read.},
}
@inproceedings{Abraham:2006:ITS:1134285.1134312,
  author = 	 {Abraham, Robin and Erwig, Martin},
  title = 	 {{Inferring Templates from Spreadsheets}},
  booktitle = 	 {Proceedings of the 28th International Conference on
                  Software Engineering},
  series = 	 {ICSE '06},
  year = 	 {2006},
  isbn = 	 {1-59593-375-1},
  location = 	 {Shanghai, China},
  pages = 	 {182--191},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/1134285.1134312},
  doi = 	 {10.1145/1134285.1134312},
  acmid = 	 {1134312},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user software engineering, spreadsheet
                  specification, template inference},
  abstract = 	 {We present a study investigating the performance of a system for automatically inferring spreadsheet templates. These templates allow users to safely edit spreadsheets, that is, certain kinds of errors such as range, reference, and type errors can be provably prevented. Since the inference of templates is inherently ambiguous, such a study is required to demonstrate the effectiveness of any such automatic system. The study results show that the system considered performs significantly better than subjects with intermediate to expert level programming expertise. These results are important because the translation of the huge body of existing spreadsheets into a system based on safety-guaranteeing templates cannot be performed without automatic support. We also carried out post-hoc analyses of the video recordings of the subjects' interactions with the spreadsheets and found that although expert-level subjects needed less time and developed more accurate templates than less experienced subjects, they did not inspect fewer cells in the spreadsheet. \%and found that expert-level subjects spend less time and inspect fewer cells in the spreadsheet and develop more accurate templates than subjects with less experience.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1134312&ftid=355341&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:31>},
  notes = 	 {Model-driven development, inferring models. Low priority read.},
}
@inproceedings{Hermans:2011:SPS:1985793.1985855,
  author = 	 {Hermans, Felienne and Pinzger, Martin and van
                  Deursen, Arie},
  title = 	 {{Supporting Professional Spreadsheet Users by
                  Generating Leveled Dataflow Diagrams}},
  booktitle = 	 {Proceedings of the 33rd International Conference on
                  Software Engineering},
  series = 	 {ICSE '11},
  year = 	 {2011},
  isbn = 	 {978-1-4503-0445-0},
  location = 	 {Waikiki, Honolulu, HI, USA},
  pages = 	 {451--460},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/1985793.1985855},
  doi = 	 {10.1145/1985793.1985855},
  acmid = 	 {1985855},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {data flow diagrams, end-user programming,
                  spreadsheets, visualization},
  abstract = 	 {Thanks to their flexibility and intuitive programming model, spreadsheets are widely used in industry, often for businesscritical applications. Similar to software developers, professional spreadsheet users demand support for maintaining and transferring their spreadsheets. In this paper, we first study the problems and information needs of professional spreadsheet users by means of a survey conducted at a large financial company. Based on these needs, we then present an approach that extracts this information from spreadsheets and presents it in a compact and easy to understand way, with leveled dataflow diagrams. Our approach comes with three different views on the dataflow that allow the user to analyze the dataflow diagrams in a top-down fashion. To evaluate the usefulness of the proposed approach, we conducted a series of interviews as well as nine case studies in an industrial setting. The results of the evaluation clearly indicate the demand for and usefulness of our approach in ease the understanding of spreadsheets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1985855&ftid=969519&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:32>},
  notes = 	 {Understanding ana visualiztion of spreadsheets. Low priority.},
}
@article{Fisher:2005:ESC:1082983.1083242,
  author = 	 {Fisher, Marc and Rothermel, Gregg},
  title = 	 {{The EUSES Spreadsheet Corpus: A Shared Resource for
                  Supporting Experimentation with Spreadsheet
                  Dependability Mechanisms}},
  journal = 	 {SIGSOFT Softw. Eng. Notes},
  issue_date = 	 {July 2005},
  volume = 	 {30},
  number = 	 {4},
  month = 	 {may},
  year = 	 {2005},
  issn = 	 {0163-5948},
  pages = 	 {1--5},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1082983.1083242},
  doi = 	 {10.1145/1082983.1083242},
  acmid = 	 {1083242},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, end-user software engineering},
  abstract = 	 {In recent years several tools and methodologies have been developed to improve the dependability of spreadsheets. However, there has been little evaluation of these dependability devices on spreadsheets in actual use by end users. To assist in the process of evaluating these methodologies, we have assembled a corpus of spreadsheets from a variety of sources. We have ensured that these spreadsheets are suitable for evaluating dependability devices in Microsoft Excel (the most commonly used commercial spreadsheet environment) and have measured a variety of feature of these spreadsheets to aid researchers in selecting subsets of the corpus appropriate to their needs.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1083242&ftid=328659&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:34>},
  notes = 	 {Spreadsheet corpus. Low priority.},
}
@inproceedings{Fisher:2005:ESC:1083231.1083242,
  author = 	 {Fisher, Marc and Rothermel, Gregg},
  title = 	 {{The EUSES Spreadsheet Corpus: A Shared Resource for
                  Supporting Experimentation with Spreadsheet
                  Dependability Mechanisms}},
  booktitle = 	 {Proceedings of the First Workshop on End-user
                  Software Engineering},
  series = 	 {WEUSE I},
  year = 	 {2005},
  isbn = 	 {1-59593-131-7},
  location = 	 {St. Louis, Missouri},
  pages = 	 {1--5},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1082983.1083242},
  doi = 	 {10.1145/1082983.1083242},
  acmid = 	 {1083242},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, end-user software engineering},
  abstract = 	 {In recent years several tools and methodologies have been developed to improve the dependability of spreadsheets. However, there has been little evaluation of these dependability devices on spreadsheets in actual use by end users. To assist in the process of evaluating these methodologies, we have assembled a corpus of spreadsheets from a variety of sources. We have ensured that these spreadsheets are suitable for evaluating dependability devices in Microsoft Excel (the most commonly used commercial spreadsheet environment) and have measured a variety of feature of these spreadsheets to aid researchers in selecting subsets of the corpus appropriate to their needs.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1083242&ftid=328659&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:36>},
}
@inproceedings{Dou:2014:SAH:2568225.2568316,
  author = 	 {Dou, Wensheng and Cheung, Shing-Chi and Wei, Jun},
  title = 	 {Is Spreadsheet Ambiguity Harmful? Detecting and
                  Repairing Spreadsheet Smells Due to Ambiguous
                  Computation},
  booktitle = 	 {Proceedings of the 36th International Conference on
                  Software Engineering},
  series = 	 {ICSE 2014},
  year = 	 {2014},
  isbn = 	 {978-1-4503-2756-5},
  location = 	 {Hyderabad, India},
  pages = 	 {848--858},
  numpages = 	 {11},
  url = 	 {http://doi.acm.org/10.1145/2568225.2568316},
  doi = 	 {10.1145/2568225.2568316},
  acmid = 	 {2568316},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {Spreadsheet, ambiguous computation, repair, smell},
  abstract = 	 {Spreadsheets are widely used by end users for numerical computation in their business. Spreadsheet cells whose computation is subject to the same semantics are often clustered in a row or column. When a spreadsheet evolves, these cell clusters can degenerate due to ad hoc modifications or undisciplined copy-and-pastes. Such degenerated clusters no longer keep cells prescribing the same computational semantics, and are said to exhibit ambiguous computation smells. Our empirical study finds that such smells are common and likely harmful. We propose AmCheck, a novel technique that automatically detects and repairs ambiguous computation smells by recovering their intended computational semantics. A case study using AmCheck suggests that it is useful for discovering and repairing real spreadsheet problems.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2568316&ftid=1467949&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:38>},
  notes = 	 {Quality assurance and debugging, tool, empirical study. Low priority.},
}
@inproceedings{Chen:2014:ISD:2623330.2623617,
  author = 	 {Chen, Zhe and Cafarella, Michael},
  title = 	 {{Integrating Spreadsheet Data via Accurate and
                  Low-effort Extraction}},
  booktitle = 	 {Proceedings of the 20th ACM SIGKDD International
                  Conference on Knowledge Discovery and Data Mining},
  series = 	 {KDD '14},
  year = 	 {2014},
  isbn = 	 {978-1-4503-2956-9},
  location = 	 {New York, New York, USA},
  pages = 	 {1126--1135},
  numpages = 	 {10},
  url = 	 {http://doi.acm.org/10.1145/2623330.2623617},
  doi = 	 {10.1145/2623330.2623617},
  acmid = 	 {2623617},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {graphical model, information extraction,
                  spreadsheets},
  abstract = 	 {Spreadsheets contain valuable data on many topics. However, spreadsheets are difficult to integrate with other data sources. Converting spreadsheet data to the relational model would allow data analysts to use relational integration tools. We propose a two-phase semiautomatic system that extracts accurate relational metadata while minimizing user effort. Based on an undirected graphical model, our system enables downstream spreadsheet integration applications. First, the automatic extractor uses hints from spreadsheets' graphical style and recovered metadata to extract the spreadsheet data as accurately as possible. Second, the interactive repair identifies similar regions in distinct spreadsheets scattered across large spreadsheet corpora, allowing a user's single manual repair to be amortized over many possible extraction errors. Our experiments show that a human can obtain the accurate extraction with just 31\% of the manual operations required by a standard classification based technique on two real-world datasets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2623617&ftid=1495108&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:41>},
  notes = 	 {Converting spreadsheet databases to relational ones. Low priority.},
}
@inproceedings{Hermans:2009:GDK:1595782.1595798,
  author = 	 {Hermans, Felienne},
  title = 	 {{Gathering Domain Knowledge from Spreadsheets}},
  booktitle = 	 {Proceedings of the Doctoral Symposium for ESEC/FSE
                  on Doctoral Symposium},
  series = 	 {ESEC/FSE Doctoral Symposium '09},
  year = 	 {2009},
  isbn = 	 {978-1-60558-731-8},
  location = 	 {Amsterdam, The Netherlands},
  pages = 	 {37--38},
  numpages = 	 {2},
  url = 	 {http://doi.acm.org/10.1145/1595782.1595798},
  doi = 	 {10.1145/1595782.1595798},
  acmid = 	 {1595798},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {data mining, reverse engineering, spreadsheets},
  abstract = 	 {Many companies use an ad hoc notation to describe the domain they work in. We consider this notation, that often occurs in the form of spreadsheets, as an unexplored source of domain knowledge. With this research we will investigate how software engineering techniques, like reverse engineering and data mining, can be applied to spreadsheets. Our first goal is to develop means to formalize spreadsheets. Formalization can be used in different ways, such as the validation of existing spreadsheets, documentation, and also for the transformation of spreadsheets into applications.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1595798&ftid=673552&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:43>},
  notes = 	 {Reverse engineering of spreadsheet models. Low priority.},
}
@inproceedings{Doush:2010:DRT:1815330.1815391,
  author = 	 {Doush, Iyad Abu and Pontelli, Enrico},
  title = 	 {{Detecting and Recognizing Tables in Spreadsheets}},
  booktitle = 	 {Proceedings of the 9th IAPR International Workshop
                  on Document Analysis Systems},
  series = 	 {DAS '10},
  year = 	 {2010},
  isbn = 	 {978-1-60558-773-8},
  location = 	 {Boston, Massachusetts, USA},
  pages = 	 {471--478},
  numpages = 	 {8},
  url = 	 {http://doi.acm.org/10.1145/1815330.1815391},
  doi = 	 {10.1145/1815330.1815391},
  acmid = 	 {1815391},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {spreadsheet analysis, spreadsheets, table
                  navigation, table recognition, visual impairments},
  abstract = 	 {Detecting tables in a spreadsheet is the first step needed to make spreadsheet documents accessible to individuals with visual disabilities. Techniques to enable aural presentation and navigation of tables have been proposed, but they assume a thorough knowledge of the structure of the table; on the other hand, boundaries and structure of tables in a spreadsheet are not evident without a visual exploration. This paper presents an algorithm for table recognition in spreadsheets. The algorithm uses three types of cells as its basis: title cell, header cell, and data cell. Different attributes of the cells are used to identify the cell type within a spreadsheet. Hierarchical clustering is used to aggregate cells to compose the functional components of a table. The algorithm has been evaluated on a diverse set of benchmarks with very encouraging results.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1815391&ftid=822012&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:45>},
  notes = 	 {Spreadsheet understanding and analysis. Low priority.},
}
@inproceedings{Joharizadeh:2015:FBS:2814189.2815373,
  author = 	 {Joharizadeh, Nima},
  title = 	 {{Finding Bugs in Spreadsheets Using Reference
                  Counting}},
  booktitle = 	 {Companion Proceedings of the 2015 ACM SIGPLAN
                  International Conference on Systems, Programming,
                  Languages and Applications: Software for Humanity},
  series = 	 {SPLASH Companion 2015},
  year = 	 {2015},
  isbn = 	 {978-1-4503-3722-9},
  location = 	 {Pittsburgh, PA, USA},
  pages = 	 {73--74},
  numpages = 	 {2},
  url = 	 {http://doi.acm.org/10.1145/2814189.2815373},
  doi = 	 {10.1145/2814189.2815373},
  acmid = 	 {2815373},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {Automated Testing, Spreadsheet testing},
  abstract = 	 {Spreadsheets are considered one of the most widely used end-user programming environments. Just as it is important for software to be free of bugs, spreadsheets need to be free of errors. This is important because in some cases, errors in spreadsheets can cost a financial entity thousands of dollars. In this work, we formulate a class of commonplace errors based on our manual inspection of real life spreadsheets, and further provide an analysis algorithm to detect these errors. We introduce ``reference counting&#039;&#039; as a simple yet effective algorithm to detect range errors. We finally demonstrate how reference counting can effectively point out erroneous cells in faulty spreadsheets.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2815373&ftid=1636919&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:47>},
  notes = 	 {Debugging, quality assurance, analysis. Low priority.},
}
@article{Rothermel:2001:MTS:366378.366385,
  author = 	 {Rothermel, Gregg and Burnett, Margaret and Li, Lixin
                  and Dupuis, Christopher and Sheretov, Andrei},
  title = 	 {{A Methodology for Testing Spreadsheets}},
  journal = 	 {ACM Trans. Softw. Eng. Methodol.},
  issue_date = 	 {Jan. 2001},
  volume = 	 {10},
  number = 	 {1},
  month = 	 {jan},
  year = 	 {2001},
  issn = 	 {1049-331X},
  pages = 	 {110--147},
  numpages = 	 {38},
  url = 	 {http://doi.acm.org/10.1145/366378.366385},
  doi = 	 {10.1145/366378.366385},
  acmid = 	 {366385},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {software testing, spreadsheets},
  abstract = 	 {Spreadsheet languages, which include commercial spreadsheets and various research systems, have had a substantial impact on end-user computing. Research shows, however, that spreadsheets often contain faults; thus, we would like to provide at least some of the benefits of formal testing methodologies to the creators of spreadsheets. This article presents a testing methodology that adapts data flow adequacy criteria and coverage monitoring to the task of testing spreadsheets. To accommodate the evaluation model used with spreadsheets, and the interactive process by which they are created, our methodology is incremental. To accommodate the users of spreadsheet languages, we provide an interface to our methodology that does not require an understanding of testing theory. We have  implemented our testing methodology in the context of the Forms/3 visual spreadsheet language. We report  on the methodology, its time and space costs, and the mapping from the testing strategy to the user interface. In an empirical study, we found that test suites created according to our methodology detected, on average, 81\% of the faults in a set of faulty spreadsheets, significantly outperforming randomly generated test suites.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=366385&ftid=51506&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:48>},
  notes = 	 {Testing. Low priority.},
}
@inproceedings{Hermans:2014:BRE:2635868.2661673,
  author = 	 {Hermans, Felienne and Dig, Danny},
  title = 	 {{BumbleBee: A Refactoring Environment for Spreadsheet
                  Formulas}},
  booktitle = 	 {Proceedings of the 22Nd ACM SIGSOFT International
                  Symposium on Foundations of Software Engineering},
  series = 	 {FSE 2014},
  year = 	 {2014},
  isbn = 	 {978-1-4503-3056-5},
  location = 	 {Hong Kong, China},
  pages = 	 {747--750},
  numpages = 	 {4},
  url = 	 {http://doi.acm.org/10.1145/2635868.2661673},
  doi = 	 {10.1145/2635868.2661673},
  acmid = 	 {2661673},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {end-user programming, spreadsheets, transformation},
  abstract = 	 {Spreadsheets are widely used in industry. It is estimated that end-user programmers outnumber regular programmers by a factor of 5. However, spreadsheets are error-prone: several reports exist of companies that have lost big sums of money due to spreadsheet errors. In previous work, spreadsheet smells have proven to be the cause of some of these errors. To that end, we have developed a tool that can apply refactorings to spreadsheet formulas, implementing our previous work on spreadsheet refactoring, which showed that spreadsheet formula smells are very common and that refactorings for them are widely applicable and that refactoring them with a tool is both quicker and less error-prone. Our new tool Bumblebee is able to execute refactorings originating from both these papers, by means of an extensible syntax, and can furthermore apply refactorings on entire groups of formulas, thus improving upon the existing tool RefBook. Finally, BumbleBee can also execute transformations other than refactorings.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=2661673&ftid=1510907&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:50>},
  notes = 	 {Refactoring tool, for better understanding. Low priority.},
}
@inproceedings{McDaid:2008:TDW:1370847.1370853,
  author = 	 {McDaid, Kevin and Rust, Alan and Bishop, Brian},
  title = 	 {{Test-driven Development: Can It Work for
                  Spreadsheets?}},
  booktitle = 	 {Proceedings of the 4th International Workshop on
                  End-user Software Engineering},
  series = 	 {WEUSE '08},
  year = 	 {2008},
  isbn = 	 {978-1-60558-034-0},
  location = 	 {Leipzig, Germany},
  pages = 	 {25--29},
  numpages = 	 {5},
  url = 	 {http://doi.acm.org/10.1145/1370847.1370853},
  doi = 	 {10.1145/1370847.1370853},
  acmid = 	 {1370853},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {spreadsheet development., test-driven development},
  abstract = 	 {It is widely documented that the absence of a structured approach to spreadsheet engineering is a key factor in the high level of spreadsheet errors. In this paper we propose and investigate the application of Test-Driven Development to the creation of spreadsheets. Test-Driven Development is an emerging development technique in software engineering that has been shown to result in better quality software code. It has also been shown that this code requires less testing and is easier to maintain. Through a set of case studies we demonstrate that Test-Driven Development can be applied to the development of spreadsheets. We present the detail of these studies preceded by a clear explanation of the technique and its application to spreadsheet engineering. A supporting tool under development by the authors is also documented along with proposed research to determine the effectiveness of the methodology and the associated tool.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1370853&ftid=498650&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: rejected <2016-01-29 16:12:52>},
  notes = 	 {Testing and development methods. Low priority.},
}
@inproceedings{Ayalew:2009:VAI:1527033.1527038,
  author = 	 {Ayalew, Yirsaw},
  title = 	 {A Visualization-based Approach for Improving
                  Spreadsheet Quality},
  booktitle = 	 {Proceedings of the Warm Up Workshop for ACM/IEEE
                  ICSE 2010},
  series = 	 {WUP '09},
  year = 	 {2009},
  isbn = 	 {978-1-60558-565-9},
  location = 	 {Cape Town, South Africa},
  pages = 	 {13--16},
  numpages = 	 {4},
  url = 	 {http://doi.acm.org/10.1145/1527033.1527038},
  doi = 	 {10.1145/1527033.1527038},
  acmid = 	 {1527038},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {spreadsheet, spreadsheet quality, spreadsheet
                  understanding, visualization},
  abstract = 	 {Spreadsheet programs, artefacts developed by end-user programmers, are used for a variety of important tasks and decisions. However, as the literature indicates, a significant proportion of spreadsheet programs contain faults. One of the contributing factors to the quality issue is the invisibility of cell dependencies (which define the dataflow structure of a spreadsheet) up on which computations are performed. In an attempt to provide a guide in understanding spreadsheets, this paper presents an approach to visualize a spreadsheet in terms of logical areas using the MCL (Markov Clustering) algorithm. Instead of focusing their attention on the whole spreadsheet, spreadsheet users may narrow their focus to one logical area at a time. To evaluate our approach, a prototype tool has been developed and integrated into Microsoft Excel.},
  review = 	 {fbie: rejected <2016-01-29 16:13:01>},
  notes = 	 {Understanding by visualization of dependencies. Low priority.},
}
@inproceedings{Sestoft:2008:IFS:1370847.1370867,
  author = 	 {Sestoft, Peter},
  title = 	 {{Implementing Function Spreadsheets}},
  booktitle = 	 {Proceedings of the 4th International Workshop on
                  End-user Software Engineering},
  series = 	 {WEUSE '08},
  year = 	 {2008},
  isbn = 	 {978-1-60558-034-0},
  location = 	 {Leipzig, Germany},
  pages = 	 {91--94},
  numpages = 	 {4},
  url = 	 {http://doi.acm.org/10.1145/1370847.1370867},
  doi = 	 {10.1145/1370847.1370867},
  acmid = 	 {1370867},
  publisher = 	 {ACM},
  address = 	 {New York, NY, USA},
  keywords = 	 {function spreadsheet},
  abstract = 	 {A large amount of end-user development is done with spreadsheets. The spreadsheet metaphor is attractive because it is visual and accommodates interactive experimentation, but as observed by Peyton Jones, Blackwell and Burnett, the spreadsheet metaphor does not admit even the most basic abstraction: that of turning an expression into a named function. Hence they proposed a way to define a function in terms of a worksheet with designated input and output cells; we shall call it a function sheet. The goal of our work is to develop implementations of function sheets and study their application to realistic examples. Therefore, we are also developing a simple yet comprehensive spreadsheet core implementation for experimentation with this technology. Here we report briefly on our experiments with function sheets as well as other uses of our spreadsheet core implementation.},
  fullTextUrl =  {http://dl.acm.org/ft_gateway.cfm?id=1370867&ftid=498664&dwn=1&CFID=745299778&CFTOKEN=60877949},
  review = 	 {fbie: accepted <2016-01-29 16:13:05>},
  notes = 	 {Funcalc.},
}
