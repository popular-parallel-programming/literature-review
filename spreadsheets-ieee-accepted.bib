@INPROCEEDINGS{1173080,
  author = 	 {Mittermeir, R. and Clermont, M.},
  booktitle = 	 {Reverse Engineering, 2002. Proceedings. Ninth
                  Working Conference on},
  title = 	 {Finding high-level structures in spreadsheet
                  programs},
  year = 	 {2002},
  pages = 	 {221-232},
  abstract = 	 {Spreadsheets are a common tool in end-user
                  programming, but even while important decisions are
                  based on spreadsheet computations, spreadsheets are
                  poorly documented software and the differences
                  between simple one-shot computations and large,
                  long-living sheets are not well understood. Like
                  other software, production spreadsheets are subject
                  to repeated maintenance cycles. Consequently, as
                  with conventional software, short maintenance cycles
                  and poor documentation tend to decrease their
                  quality. We introduce an approach to help
                  maintainers understand the structure of large
                  spreadsheets as well as to zoom into certain parts
                  of the spreadsheet. To cope with large sheets, our
                  approach features two levels of abstraction: logical
                  areas and semantic classes. These abstractions are
                  based on different degrees of relatedness of cells
                  according to the formulas they contain.},
  keywords = 	 {software maintenance;spreadsheet
                  programs;abstraction;cell relatedness;end-user
                  programming;formulas;high-level structure
                  finding;logical areas;quality;repeated maintenance
                  cycles;semantic classes;spreadsheet
                  programs;Application software;Computer
                  industry;Computer
                  languages;Documentation;Microcomputers;Production;Prototypes;Software
                  engineering;Software maintenance;Spreadsheet
                  programs},
  doi = 	 {10.1109/WCRE.2002.1173080},
  ISSN = 	 {1095-1350},
  review = 	 {fbie: accepted <2016-02-04 10:10:11>},
  notes = 	 {Abstraction and separation of logic and data, highly relevant.},
}
@INPROCEEDINGS{6070409,
  author = 	 {Mendes, J.},
  booktitle = 	 {Visual Languages and Human-Centric Computing
                  (VL/HCC), 2011 IEEE Symposium on},
  title = 	 {ClassSheet-driven spreadsheet environments},
  year = 	 {2011},
  pages = 	 {235-236},
  abstract = 	 {The paper mentions that a spreadsheet business model
                  is defined from which a customized spreadsheet
                  application is generated guarantying the consistency
                  of the spreadsheet with the underlying model. This
                  approach closes the gap between creating and using a
                  domain specific language for spreadsheet models and
                  a totally different framework for actually editing
                  spreadsheet data. Instead, it unifies these
                  operations within spreadsheets: in one sheet it
                  defines the underlying model while another sheet
                  holds the actual data, such that the model and the
                  data are kept synchronized. An important feature is
                  that model evolution is available as a set of
                  pre-defined operations. Also, any evolution in a
                  spreadsheet model is automatically propagated to its
                  spreadsheet instance (that contains the underlying
                  data). ClassSheets are a high-level, object-oriented
                  formalism to specify the business logic of
                  spreadsheets. They allow users to express business
                  object structures within a spreadsheet using
                  concepts from the Unified Modeling Language (UML).},
  keywords = 	 {Unified Modeling Language;business data
                  processing;object-oriented methods;spreadsheet
                  programs;ClassSheet-driven spreadsheet
                  environment;Unified Modeling Language;customized
                  spreadsheet application;domain specific
                  language;object-oriented formalism;spreadsheet
                  business logic;spreadsheet business model;Adaptation
                  models;Data models;Object oriented
                  modeling;Synchronization;USA Councils;Unified
                  modeling language;Visualization},
  doi = 	 {10.1109/VLHCC.2011.6070409},
  ISSN = 	 {1943-6092},
  month = 	 {Sept},
  review = 	 {fbie: accepted <2016-02-04 10:03:58>},
  notes = 	 {Abstraction of spreadsheets, sounds like a concept similar to function sheets. Might be relevant.},
}
@INBOOK{6940568,
  author = 	 {Sestoft, P.},
  booktitle = 	 {Spreadsheet Implementation Technology:Basics and
                  Extensions},
  title = 	 {Bibliography},
  year = 	 {2014},
  pages = 	 {328},
  abstract = 	 { Spreadsheets are used daily by millions of people
                  for tasks that range from organizing a list of
                  addresses to carrying out complex economic
                  simulations. Spreadsheet programs are easy to learn
                  and convenient to use because they have a clear
                  visual model and a simple efficient underlying
                  computational model. Yet although the basic
                  spreadsheet model could be extended, improved, or
                  otherwise experimented with in many ways, there is
                  no coherently designed, reasonably efficient open
                  source spreadsheet implementation that is a suitable
                  platform for such experiments. This book fills the
                  gap, teaching users how to experiment with and
                  implement innovative spreadsheet functionality and
                  introducing two software platforms for doing
                  so. Along the way, it draws on and illustrates
                  software technologies and computer science topics
                  that range from object-oriented programming to
                  compiler technology.  Spreadsheet Implementation
                  Technology surveys a wide range of information about
                  spreads eets drawn from user experience, the
                  scientific literature, and patents. After
                  summarizing the spreadsheet computation model and
                  the most important challenges for efficient
                  recalculation, the book describes Corecalc, a core
                  implementation of essential spreadsheet
                  functionality suitable for practical experiments,
                  and Funcalc, an extension of Corecalc that allows
                  users to define their own functions without
                  extraneous programming languages or loss of
                  efficiency. It also shows the advantages of
                  automatic function specialization and offers a
                  user's manual for Funcalc. The Corecalc and Funcalc
                  software is downloadable free of charge.  },
  publisher = 	 {MIT Press},
  isbn = 	 {9780262326537},
  url = 	 {http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6940568},
  review = 	 {fbie: accepted <2016-02-04 10:01:58>},
  notes = 	 {Funcalc. This should be replaced with the actual reference to the book.},
}
