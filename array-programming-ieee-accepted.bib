@INPROCEEDINGS{367042,
  author = 	 {Shafarenko, A.V.},
  booktitle = 	 {Massively Parallel Computing Systems, 1994.,
                  Proceedings of the First International Conference
                  on},
  title = 	 {{RETRAN: a recurrent paradigm for massively parallel
                  array computing}},
  year = 	 {1994},
  pages = 	 {478-487},
  abstract = 	 {An applicative paradigm of parallel array processing
                  based on recurrence relations and a data-parallel
                  overloading of constants is presented. It is shown
                  that the suggested principle of anti-currying
                  together with introduction of function-based, eager
                  arrays result in a denotational system superior to
                  array extensions of pragmatic languages in that it
                  can exploit spatial symmetries of arrays to unify
                  the notation. The main novelty here is completely
                  asynchronous treatment of arrays of arrow types
                  (arrays of possibly array-valued functions) which
                  lends itself nicely to a massively parallel
                  data-flow implementation with yet static scheduling
                  due to the imposed strictness of the array
                  constructor. The evolution of data is defined in the
                  tradition form of stream transformation},
  keywords = 	 {data flow computing;parallel processing;parallel
                  programming;RETRAN;anti-currying;array-valued
                  functions;arrays;massively parallel array
                  computing;massively parallel data-flow;pragmatic
                  languages;recurrent paradigm;stream
                  transformation;Algebra;Concurrent
                  computing;Functional programming;Genetic
                  programming;Hardware;Parallel processing;Parallel
                  programming;Processor scheduling;Programming
                  profession;Skeleton},
  doi = 	 {10.1109/MPCS.1994.367042},
  month = 	 {May},
  review = 	 {fbie: accepted <2016-01-12 15:07:18>},
}
@INPROCEEDINGS{4228136,
  author = 	 {Grelck, C. and Scholz, S.-B. and Shafarenko, A.},
  booktitle = 	 {Parallel and Distributed Processing Symposium,
                  2007. IPDPS 2007. IEEE International},
  title = 	 {{Coordinating Data Parallel SAC Programs with S-Net}},
  year = 	 {2007},
  pages = 	 {1-8},
  abstract = 	 {We propose a two-layered approach for exploiting
                  different forms of concurrency in complex systems:
                  we specify computational components in our
                  functional array language SAC, which exploits data
                  parallel properties of array processing code. The
                  declarative stream processing language S-Net is used
                  to orchestrate the collaborative behaviour of these
                  components in a streaming network. We illustrate our
                  approach by a hybrid implementation of a sudoku
                  puzzle solver as a representative for more complex
                  search problems.},
  keywords = 	 {parallel languages;parallel programming;S-Net;array
                  processing code;data parallel SAC program;functional
                  array language;sudoku puzzle solver;Array signal
                  processing;Collaboration;Concurrent computing;Data
                  structures;Debugging;Parallel languages;Parallel
                  processing;Search problems;Shape;System recovery},
  doi = 	 {10.1109/IPDPS.2007.370408},
  month = 	 {March},
  review = 	 {fbie: accepted <2016-01-12 15:03:42>},
}
@INPROCEEDINGS{47507,
  author = 	 {O'Donnell, J.T.},
  booktitle = 	 {Frontiers of Massively Parallel Computation,
                  1988. Proceedings., 2nd Symposium on the Frontiers
                  of},
  title = 	 {{MPP implementation of abstract data parallel
                  architectures for declarative programming languages}},
  year = 	 {1988},
  pages = 	 {629-636},
  abstract = 	 {A method of implementing declarative data structures
                  efficiently on a data parallel architecture is
                  illustrated by the implementation of a data parallel
                  algorithm for functional arrays on the massively
                  parallel processor (MPP). Functional arrays are
                  defined, and it is shown why the basic operations on
                  them are slow when implemented on a sequential
                  machine. Functional arrays cannot be implemented
                  efficiently on conventional architectures without
                  severely restricting the way a program can access
                  the array. Conventional unrestricted algorithms
                  typically require O(log n) time to update an array
                  and access an element. The MPP algorithm performs
                  these operations in a constant time of about 100 Î¼s},
  keywords = 	 {data structures;parallel architectures;MPP
                  implementation;abstract data parallel
                  architectures;declarative programming
                  languages;functional arrays;sequential
                  machine;Computer architecture;Computer
                  languages;Computer science;Concurrent computing;Data
                  structures;Functional programming;Indexing;Logic
                  programming;Parallel architectures;Parallel
                  processing},
  doi = 	 {10.1109/FMPC.1988.47507},
  month = 	 {Oct},
  review = 	 {fbie: accepted <2016-01-12 15:01:13>},
}
